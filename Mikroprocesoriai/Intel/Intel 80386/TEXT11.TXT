══════════════════════════════════════
 Микропроцессор "INTEL" 80386 cостоит
из центрального процессора,блока упра-
вления памятью и шины интерфейса(смо-
три рисунок).
 Сердце микропроцессора ─ главный про-
цессор включает в себя  исполнительный
блок,содержащий 8 32-х разрядных реги-
стров общего назначения,которые  испо-
льзуются как для вычисления адреса,так
и для операций с  данными.Исполнитель-
ный блок также включает 64-х разрядное
барабанное устройство,используемое для
ускорения многих операций.
 Устройство обработки команд  дешифри-
рует коды  операций команд  и помещает
их в очередь для немедленного выполне-
ния исполнительным блоком.
 Устройство управления памятью состоит
из блока сегментации и устройства за-
мещения страниц или подкачки.
 Сегментация позволяет управлять прос-
транством логического адреса.
 Механизм подкачки работает "внизу" и
параллелен процессу сегментации , что
позволяет управлять пространством фи-
зического адреса.Одна страница его со-
ставляет 4-е килобайта.
 Для использования системы виртуальной
памяти 80386 поддерживает полную  вос-
станавливаемость  для  всех  ошибок на
странице и сегменте.Память может  быть
организованная в 1 или более сегментов
различной длинны до 4 гигабайт.
 Любое задание на 80386 может иметь 16
тысчяч 381 сегмент,до 4 гигабайт  каж-
дый,т.о  обеспечивается  64  терабайта
виртуальной памяти для каждой задачи.
 Блок сегментации обеспечивает  четыре
уровня  защиты  для  изоляции и защиты
устройств и  операционных систем  друг
от друга. Конструкция  микропроцессора
позволяет все системы соединять в еди-
ное целое.
 80386 имеет 2 режима работы:
   1.РЕЖИМ РЕАЛЬНОЙ АДРЕСАЦИИ
   2.РЕЖИМ ЗАЩИЩЕННОЙ ВИРТУАЛЬНОЙ
    АДРЕСАЦИИ
 В реальном режиме 80386 работает  как
очень быстрый 8086,но с 32-х разрядным
расширением.Реальный  режим  также ис-
пользуется для подготовки  микропроце-
ссора к работе в защищенном режиме.
 Виртуальный режим(в.р.)  обеспечивает
доступ  к  очень  сложному,современей-
шему  способу   управлению   памятью,а
также для подкачки(замещения)  страниц
и других возможностей микропроцессора.
 В в.р. программное обеспечение  80386
может решать задачи по степени сложно-
сти такие же,как у 8086 и 80286 в  ре-
жиме виртуальной памяти.Это  позволяет
выполнять програмное обеспечение 8086.
 Виртуальные задачи 80386 могут  защи-
щаться  одна  от  другой  и главной ОС
80386  путем  использования  замещения
страниц, эмуляции команд ввода-вывода.
 Для  совмещения  компьютера  с  высо-
коэффективными  системами,   интерфейс
шины 80386 имеет конвеерную  обработку
данных,динамическое     резервирование
шины  данных  и  прямые  сигналы  BYTE
ENABLE...
  ВЫ  все   поняли  из   прочитанного?
Не пугайтесь!  Это только  вступление,
далее  всему  будет  данно обьяснение,
по возможности по-проще.
      ОБЗОР РЕГИСТРОВ (смотри рисунок)
 80386  имеет  32  програмно-доступных
регистра в следующих категориях:

 1.РЕГИСТРЫ ОБЩЕГО НАЗНАЧЕНИЯ
 2.РЕГИСТРЫ СЕГМЕНТАЦИИ
 3.РЕГИСТР ФЛАГОВ
 4.РЕГИСТРЫ УПРАВЛЕНИЯ
 5.РЕГИСТРЫ СИСТЕМНОГО АДРЕСА
 6.РЕГИСТР ТЕСТОВ
 7.РЕГИСТР ОТЛАДКИ

Эти  регистры  являются  также набором
8086,80286,поэтому  все  16-и  разряд-
ные  регистры  всех  процессоров более
ранних  выпусков  "покрываются"   32-х
разрядными регистрами 80386.
 На рисунке представлены все  регистры
базовой  архитектуры  микропроцессора,
которые включают: регистры общего  ад-
реса и данных,указатель команд,регистр
флагов.Данные  регистры  при включении
новой задачи загружаются новым  содер-
жимым.
 Базовая архитектура содержит 6  прямо
доступных сегмента, каждый размером до
4 гигабайт.Сегменты указываются значе-
ниями селектора,помещенными в  регистр
сегмента.
 Селекторы  автоматически  загружаются
при операции включения задач.
 Другой тип  регистров-- это  регистры
управления, системного  адреса,отладки
и тестов. Они используются для отладки
операционных систем.
══════════════════════════════════════
        ОПИСАНИЕ РЕГИСТРОВ.
══════════════════════════════════════
  РЕГИСТРЫ ОБЩЕГО НАЗНАЧЕНИЯ(РОН).
 Микропроцессор имеет 8-м 32-х разряд-
ных РОН.Они поддерживают 16,32-х  раз-
рядные адресные операнды, 1,8,16,32,64
операнды данных и битовые поля от 1 до
32 битов. Они  называются:EAX,EBX,ECX,
EDX,ESI,EDI,EBP,ESP.
 Младшие 16 разрядов каждого  регистра
могут  использоваться  по отдельности,
они называются:AX,BX,CX,DX,SI,DI,BP,SP
  Также могут индивидуально  использо-
ваться  младший(0-7)  и  старший(8-15)
байты  РОН  AX,BX,CX,DX,соответственно
их называют:AL,BL,CL,DL и AH,BH,CH,DH.
   Индивидуальная  доступность  байтов
РОН  обеспечивает  дополнительную гиб-
кость для операций с данными,но это не
используется при адресации.
         УКАЗАТЕЛЬ КОМАНД (IP).
Регистр указателя команд(смотри рисун-
ок) представляет собой 32-х  разрядный
регистр,который называют EIP.ОН содер-
жит смещение следующей команды,которую
нужно выполнить.Смещение всегда  опре-
деляется  относительно  сегмента кода.
Его младшие 16 бит называются IP и ис-
пользуются  при   шестнадцатиразрядной
адресации.
           РЕГИСТР ФЛАЖКОВ.
 Регистр флагов  является 32-х  разрядным и  называется EFLAGS. Определенные
биты EFLAGS,как показанно на рисунке,управляют некоторыми операциями и  под-
черкивают статус 80386.Младшие 16-ть разрядов EFLAGS представляют собой  ре-
гистр FLAGS,который может использоваться при выполнении операций с 8086.
  Наилучший способ изучения регистра  флагов--описание его побитно.Структура
регистра флагов показана на рисунке. Заметим,что на рисунке не  определяется
каждый бит.Неопределенные биты являются зарезервированными,т.е. в  настоящий
момент они не имеют  значения,однако могут быть использованны  для специаль-
ных целей в последующих версиях микропроцессора.















 Все  флаги  младшего  байта  регистра  устанавливаются арифметическими или
логическими операциями процессора.За исключением флага переполнения,все фла-
ги  старшего байта младшего слова отражают состояние микропроцессора  и вли-
яют на характер выполнения программ.
                           ФЛАГ ЗНАКА
Флаг знака  SF  показывает,положительным или отрицательным был результат по-
следней арифметической или логической  операции.
                           ФЛАГ НУЛЯ
Флаг нуля ZF показывает,что результат последней операции был равен нулю.















                            ФЛАГ ЧЕТНОСТИ
Флаг четности PF показывает,четно или нечетно число единиц результата.Он ус-
танавливается в 1,если результат операции имеет четное число единиц-иначе в0
                            ФЛАГ ПЕРЕНОСА
Флаг четности СF используется при вычислениях повышенной точности,логических
операциях и других командах.Он показывает, был ли перенос из старшего разря-
да операнда или нет. И соответственно устанавливается в 1 или 0.
                       ФЛАГ ДОПОЛНИТЕЛЬНОГО ПЕРЕНОСА.
Этот флаг , называется AUX , позволяет микропроцессору выполнять команды















десятичной арифметики.Он показывает правильно ли выполнилась команда деся-
тичной арифметики или нет и,соответственно устанавливается в 0 или 1.
                        ФЛАГ ПЕРЕПОЛНЕНИЯ.
Флаг переполнения OF показывает,произошло переполнение при выполнении опера-
ций или нет,т.е. показывает правильность результата.Устанавливается в 0,если
переполнения не было,иначе - в 1.
                      ФЛАГ СПЕЦИАЛЬНОГО ПРЕРЫВАНИЯ.
Флаг специального прерывания TF помогает отлаживать программы.Этот флаг не
устанавливается в результате работы микропроцессора,а устанавливается прог-















раммой с помощью специальной  команды.Его также называют флагом  трассировки
или  пошаговой  работы.Когда  он  установлен,после выполнения каждой команды
возникает прерывание по трассировке.Во время процедуры прерывания  микропро-
цессор сбрасывает флаг трассировки.Это позволяет выполнять обработку перыва-
ния по трассировке без прерывания после каждой команды.После стандартной об-
работки флаги устанавливаются в исходное состояние.Т.е после выполнения сле-
дующей команды программы снова возникнет прерывание по трассировке.Этот про-
цесс будет продолжаться  до тех пор,пока  программа пользователя не  сбросит
флаг TF или не завершится выполнение задачи.















                         ФЛАГ ПРЕРЫВАНИЙ.
Флаг прерываний IF управляет внешними прерывания.Пока флаг прерываний сбро-
шен в 0,никакие внешние прерывания не будут обрабатываться микропроцессором
(за исключением немаскируемых).Когда  он установлен в 1,будет производиться
обработка любых возникающих прерываний.
                         ФЛАГ НАПРАВЛЕНИЯ.
Флаг направления DF используется микропроцессором при работе со строками,ко-
торые работают с большими блоками данных для определения направления продви-
жения по блоку,т.е. в сторону увеличения адресов или уменьшения.Когда флаг















установлен в 1,команды обработки строк работают в сторону уменьшения адресов
после обработки  единици информации,если  флаг сброшен  в 0,то  -- в сторону
увеличения.Рассмотренные биты EFLAGS  полностью совпадают с  битами регистра
FLAGS микропроцессора 8086/8088.А теперь рассмотрим биты EFLAGS,которые  по-
казывают специфику микропроцессора 80386.
                        ФЛАГ ВИРТУАЛЬНОГО РЕЖИМА.
 Флаг виртуального режима VM(бит 17) обеспечивает виртуальный 8086 режим в
пределах защищенного.Если он установлен,в то время,когда 80386 находится в
защищенном режиме,8086 включается в виртуальную 8086 операцию , манипулируя















загрузкой сегментов,как это делает 8086,генерируя 13 прерывание привелигиро-
ванных операционных кодов.Бит VM  может быть установлен в  защищенном режиме
командой IRET,если текущий привелигированный уровень равен 0,и путем включе-
ния задач на любом уровне привелегий.Бит VM не подчиняется действию  команды
POPF. PUSHF всегда посылает 0 в этот разряд,даже,если работает в виртуальном
8086 режиме. Образ EFLAGS,сохраненный  в стеке во время обработки прерывания
или во время включения задачи,будет содержать единицу в этом бите,если  пре-
рывание обрабатывалось как виртуальная 8086 задача.
                             ФЛАГ ВОЗОБНОВЛЕНИЯ(RF).















 Флаг возобновления используется при пошаговом режиме или совместно с точка-
ми прерываний регистров отладки.Он проверяется на границе команды,перед  об-
работкой  точки  останова.Если  RF  установлен,то  любая  ошибка отладки бу-
дет игнорирована  на следующей  команде. RF  автоматически сбрасывается  при
успешном окончании  каждой команды(ошибки  не сигнализируются),кроме  команд
IRET,POPF,JMP,CALL,INTER,которые вызывают включение задачи.Эти команды уста-
навливают RF в соответствии с определенным образом памяти.
                            Например:
В конце обслуживания программы прерываний команда IRET может вытолкнуть об-















раз EFLAGS имеющего RF установленным и возобновляет выполнение  программы  в
адресе точки прерывания без генерирования другого прерывания в том же месте.
              ФЛАГ ПРИЗНАКА ВЛОЖЕНИЯ ЗАДАЧ(NT) разряд 14.
 Данный флаг используется в защищенном режиме.NT устанавливается,чтобы   по-
казать что выполнение данной задачи вложено в пределах другой задачи.Если он
установлен,то сегмент состояния  текущей вложенной задачи  имеет достоверную
обратную связь с сегментом состояния предыдущей задачи.Данный бит устанавли-
вается или сбрасывается командами передающими управление другим задачам.Зна-
чение NT в EFLAGS проверяется командой IRET . Чтобы  его  установить следует















выполнять внутризадачное возвращенние или внешнезадачное возвращение.Коман-
ды POPF или IRET будут оказывать воздействие  на установку данного бита со-
гласно образу EFLAGS на любом уровне привелегий.
                     БИТ ОПРЕДЕЛИНИЯ УРОВНЯ ПРИВЕЛЕГИЙ
                    ВВОДА/ВЫВОДА(I/O P/L) разряды 12,13.
 Данное двух битовое поле также относится к защищенному режиму.Уровень  при-
вилегий ввода/вывода(I/O P/L) указывает максимальное значение текущего уров-
ня привелигий(ТУП).Для максимально  допустимого значения ТУП,при  выполнении
команд ввода/вывода без генерирования прерывания по 13 исключению , он также















указывает максимальное значение ТУП,позволяющее изменить бит IF,когда  новые
значения загружаются  из стека  в регистры  FLAGS или  EFLAGS.Команды POPF и
IRET могут изменять поле I/O P/L,когда выполняются при ТУП=0.Операции  вклю-
чения задач всегда изменяют поле I/O P/L,когда новый образ флага загружается
из сегмента состояния задачи.
                          СЕГМЕНТНЫЕ РЕГИСТРЫ.
 Шесть 16-ти разрядных сегментных регистров содержат базовые адреса  сегмен-
тов,определяющие сегменты памяти текущей адресации.Сегментные регистра пред-
ставлены на рисунке.В защищенном режиме , каждый сегмент может иметь размеры















от одного байта до целого линейного и физического пространства машины до 4Гб
в режиме реальной адресации,максимальный размер сегмента ограничен на 64Кб.
 Шесть сегментов,адресуемых в любой данный момент,орпределяются содержимым
регистров CS,SS,DS,ES,FS и GS.Значение в CS указывает на текущий сегмент ко-
да;содержимое SS указывает текущий сегмент стека;а значения в DS,ES,FS,GS на
сегменты данных.
                    РЕГИСТРЫ ДЕСКРИПТОРА СЕГМЕНТА.
Регистры дескриптора сегмента невидимы для програмиста,однако их содержание
очень полезно знать.В 80386,регистр дескриптора невидимый для программиста















соотнесен с каждым видимым регистром селектора,как показано на рисунке.
Каждый из них содержит 32-х битовый базовый адрес сегмента,его границу(пре-
дел) и другие необходимые признаки сегмента.Когда адрес сегмента загружает-
ся в сегментный регистр,ассоциативный(соотнесенный) регистр дескриптора ав-
томатически модифицируется в соответствии с новой информацией.В режиме ре-
альной адресации,только базовый адрес модифицируется напрямую,путем сдвига
его значения на четыре разряда влево,поскольку максимальная граница и приз-
наки сегмента фиксированы.В защищенном режиме базовый адрес,граница,все при-
знаки модифицируются содержимым регистра дескриптора сегмента,индексирован-















ного селектором.Каждый раз,когда  про-
исходит  ссылка  на  ячейку памяти,ре-
гистр  дескриптора  сегмента,автомати-
чески вовлекается  с сылкой  на ячейку
памяти.32-х битовый базовый адрес сег-
мента становится компонентом  вычисле-
ния линейного адреса,32-х битовое зна-
чение границы используется для  опера-
ций контроля границы,а признаки прове-
ряются на соответствие типу ссылки  на
ячейку  памяти,которая  запрашивается.
УПРАВЛЯЮЩИИ РЕГИСТРЫ.
 80386 имеет три управляющих  регистра
по 32 бита:CR0,CR2 и CR3,которые  под-
держивают состояние машины в  глобаль-
ном характере,т.е. не от специфической
до индивидуальной задачи.Эти регистры,
наряду с регистрами системного адреса,
которые будут описаны в следующем раз-
дели,поддерживают  состояние   машины,
и  воздействуют   на  все   задачи   в
системе.
CR 0:УПРАВЛЯЮЩИЙ РЕГИСТР МАШИНЫ(вклю-
чает 80286 слово состояние машины).
 CR 0,представленный на рисунке,содер-
жит 6 определенных разрядов для  целей
управления и определения  состояния.16
разрядов  младшего  порядка  CR0 также
известны  как  СЛОВО  СОСТОЯНИЕ МАШИНЫ
(MSW),для  совместимости  с защищенным
режимом 80286.Команды LMSW и SMSW  ис-
пользуются как специальные  псевдонимы
операций загрузки и хранения в  памяти
CR0,где используются только его  млад-
шие 16-ть бит.Для совместимости с опе-
рационными системами 80286,эти команды
80386  работают  аналогично   командам
80286,т.е.новые разряды CR0  игнориру-
ются.Новые операционные системы микро-
процессора intel 80386 должны  исполь-
зовать команды  для загрузки  регистра
CR0 полностью: MOV CR0.
 Теперь опишем все разряды регистра
CR0.
──────────────────────────────────────
 PG(разбиение  на  страницы,бит   31).
  PG  бит  устанавливается,чтобы  раз-
  блокировать   устройство   замещения
  страниц , выполненное  на   кристале
  (чипе).PG  устанавливается  в  0 для
  его блокировки.
──────────────────────────────────────
 ET(тип  расширения  процессора,бит 4)
  ET  показывает  тип  расширения про-
  цессора ( 80287 или 80387 ), который
  определяется  уровнем  ERROR  ввода,
  следующего за сбросом 80386.При  же-
  лании,ET бит может также быть сброш-
  ен путем загрузки CR0 при выполнении
  программы.Когда ET установлен в 1,то
  применяется 32-х битовый протокол  ,
  иначе   16-ти   битовый    протокол.
  Следует  обратить  внимание,что  для
  строгой  совместимости  с  80286 бит
  ЕТ не  подвергается воздействию  ко-
  манды LMSW.
──────────────────────────────────────
 TS   (переключение   задачи,бит    3)
  TS   автоматически   устанавливается
  каждый  раз,когда  выполняеся опера-
  ция  переключения  задачи.Когда   TS
  установлен в 1,операционный код  со-
  процессора приводит к  операционному
  прерыванию(исключение 7) Сопроцессор
  не готов,при условии,что бит MP тоже
  установлен.Обработчик прерывания обы
  чно сохраняет контекст  80287/80387,
  принадлежащий текущей задаче и  очи-
  щает бит TS перед тем,как  возврати-
  ться к ошибочному коду операции  со-
  процессора.
──────────────────────────────────────
 EM(сопроцессор             эмуляции).
  Бит  EM  устанавливается  для  того,
  чтобы  заставить  все  коды операций
  сопроцессора вырабатывать прерывание
  (исключение7)"Сопроцессор не готов".
  EM устанавливается в 0,чтобы  позво-
  лить  выполнение  кодов  операций на
  фактическом  80287 или 80387  сопро-
  цессоре(случай умолчания после сбро-
  са).Обратите внимание,что код опера-
  ции   WAIT   не   подвержен  влиянию
  бита EM.
──────────────────────────────────────
 MP(монитор    сопроцессора,бит    1).
  MP бит используется вместе с TSбитом
  для определения вырабатывает ли  код
  операции  WAIT  ошибку(исключение 7)
  "Сопроцессор  не  готов",когда TS=1.
  Когда MP=1 и TS=1 код операции  WAIT
  вырабатывает исключение 7. В  других
  случаях этого не происходит.Обратите
  внимание,что TS устанавливается  ав-
  томатически каждый раз когда  выпол-
  няется операция переключения задачи.
──────────────────────────────────────
 PE(защищенный      режим,бит      0).
  PE бит устанавливается для  создания
  возможности работы в защищенном  ре-
  жиме.Когда PE сбрасывается,процессор
  работает в реальном режиме.PE  может
  быть установлен  путем загрузки  CR0
  или MSW.PE может быть сброшен только
  при загрузке в CR0.Обратите внимание,
  что  для   строгой  совместимости  с
  80286, PE не может быть сброшен  ко-
  мандой LMSW.
──────────────────────────────────────
 CR 1: резерв.
CR 1 зарезирвирован для использования
в будущих моделях процессоров INTEL.
 CR 2: ЛИНЕЙНЫЙ АДРЕС ПРЕРЫВАНИЯ ИЗ-ЗА
      ОТСУТСТВИЯ СТРАНИЦЫ.
 CR 2,представлен на рисунке.Он содер-
жит 32-х  битовый адрес,который  опре-
деляет  наличее  ошибки  на  последней
странице.Код ошибки обработанной стра-
ницы,помещенный  в  стек  по   запросу
может  представить  дополнительрую ин-
формацию о статусе ошибки на странице.
  CR 3:БАЗОВЫЙ АДРЕС ТАБЛИЦЫ  СТРАНИЦ.
CR 3  (смотри рисунок)  содержит физи-
ческий базовый адрес таблицы  страниц.
Таблица страниц  80386 всегда  постра-
нично выравнена(т.е располагается  че-
рез 4 Кбайта).Поэтому самые младшие 12
бит CR 3 игнорируются и всегда помеща-
ются в память как неопределенные.
 Включение  задачи  через  TSS,которое
изменяет значение в CR 3,или очевидная
загрузка CR 3 любым дгугим  значением,
сделает  неверным ( недоступным)   все
вводные  таблицы  страниц,помещенные в
кэш.
  РЕГИСТРЫ СИТЕМНОГО АДРЕСА.
 Четыре  специальных  регистра сущест-
вуют для обращения к таблицам или сег-
ментам,поддерживаемыми 80286/80386 мо-
делью защиты.Данные  таблицы или  сег-
менты следующие:
 GDT (Таблица Глобального Дескриптора)
 IDT (Таблица  Дескриптора Прерывания)
 LDT (Таблица Локального Дескриптора)
 TSS (Сегмент Состояния Задачи)
Адреса данных таблиц и сегментов поме-
щены в  память специальных  регистров,
РЕГИСТРОВ СИСТЕМНОГО АДРЕСА и  РЕГИСТ-
РОВ СИСТЕМНОГО СЕГМЕНТА (смотри  рису-
нук).Называются данные регистры  соот-
ветственно GDTR,IDTR,LDTR,TR.Использо-
вание данных  регистров описывается  в
4 главе АРХИТЕКТУРА ЗАЩИЩЕННОГО РЕЖИМА
           GDTR и IDTR.
 Эти  регистры  содержат  32-х битовый
линейный базовый адрес и 16-и  битовый
предел таблицы глобального дескриптора
и  таблицы дескриптора прерывания  со-
ответственно.
 Сегменты GDT и IDT,поскольку они гло-
бальны для всех задач в  системе,опре-
деляются 32-х битовыми линейными адре-
сами(предмет  для  трансляции  страниц
если имеется возможность для подкачки)
и 16-и битовыми значениями пределов.
              LGTR и TR.
 Эти  регистры  содержат  16-и битовые
адреса сегментов для LDT и TSS.Сегмен-
ты  LDT  и  TSS,поскольку они являются
сегментами специфических задач,опреде-
ляются  адресом,помещенным  в регистры
системного сегмента.Обратите внимание,
что регистр дескриптора сегмента (  не
видимый для программиста)  соотносится
с каждым регистром системного  сегмен-
та.
══════════════════════════════════════
    РЕГИСТРЫ ОТЛАДКИ И ТЕСТОВЫЕ
             РЕГИСТРЫ.
══════════════════════════════════════
  РЕГИСТРЫ ОТЛАДКИ:Шесть доступных для
программиста регистров отладки обеспе-
чивают поддержку (на кристале)  отлад-
ки.Регистр отладки CRO-3 классифициру-
ет четыре линейных останова.Другой  из
них DR6 используется для установки то-
чек останова и Регистра Статуса Отлад-
ки DR7,а также отображает текущее сос-
тояние точек останова.Использование ре
гистров отладки будет подробно описано
далее в разделе ПОДДЕРЖКА ОТЛАДКИ.
         ТЕСТОВЫЕ РЕГИСТРЫ:
 Два регистра микропроцессора  исполь-
зуются для  управления и  тестирования
RAM/CAM   в буфере  предистории транс-
ляции  80386.TR6-регистр  тестирования
команд,а  TR7-регистр   данных,который
хранит  результат  тестирования буфера
предистории трансляции.Их  использова-
ние также  рассмотрим позже  в разделе
ТЕСТИРУЕМОСТЬ.
══════════════════════════════════════
       ДОСТУПНОСТЬ РЕГИСТРОВ.
══════════════════════════════════════
 Имеются определенные различия в  дос-
тупах к регистрам  в РЕАЛЬНОМ и  ЗАЩИ-
ЩЕННОМ режимах.В таблице(для просмотра
таблицы нажмите клавишу F10)  суммиро-
ванны все эти различия.Для  дальнейших
деталей обратитесь к разделу
АРХИТЕКТУРА РЕАЛЬНОГО РЕЖИМА.
══════════════════════════════════════
  СОВМЕСТИМОСТЬ.
  ОЧЕНЬ ВАЖНОЕ ЗАМЕЧАНИЕ:СОВМЕСТИМОСТЬ
  С ПОСЛЕДУЮЩИМИ ПРОЦЕССОРАМИ.
══════════════════════════════════════
 В предыдущем описании регистров  сле-
ду ет обратить внимание на то,что  не-
которые биты регистров 80386 не  опре-
деленны.Когда вызываются  неопределен-
ные биты обращайтесь с ними как с пол-
ностью неопределенными.Это  необходимо
для  совместимости  программного обес-
печения с  последующими будущими  про-
цессорами.Для этого следуйте следующим
рекомендациям.
 1.При тестировании значений битов оп-
ределенных  регистров,избегай  зависи-
мости от состояний неопределенных  би-
тов.Замаскируй их при тестировании.
 2.Избегай  зависимости  от  состояний
любого из неопределенных битов при по-
мещении их в  память или в  другой ре-
гистр.
 3.Следет избегать зависимости от воз-
можности содержать информацию,записан-
ную в  любом из  неопределенных разря-
дов.
  4.При загрузке регистров всегда за-
гружай их как нули.
 5.Однако,регистры,ранее   помещенные,
могут быть перезагружены без маскиров-
ки.
 Зависимость от значений  неопределен-
ных  разрядов  регистров  сделает Ваше
программное  обеспечение  зависимым от
непредусмотренной   80386    обработки
данных битов,что подвергает вас  риску
несовместимости с будущими процессора-
ми.ПОЭТОМУ  ИЗБЕГАЙ  ЛЮБОЙ ЗАВИСИМОСТИ
ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ ОТ  СОСТОЯНИЯ
НЕОПРЕДЕЛЕННЫХ БИТОВ РЕГИСТРОВ  МИКРО-
ПРОЦЕССОРА        INTEL         80386.
══════════════════════════════════════
