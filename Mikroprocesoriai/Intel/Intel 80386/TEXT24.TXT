======================================
----------------ЗАЩИТА----------------
======================================
----------Концепция защиты------------
======================================
 80386 имеет 4 уровня защиты,которые
оптимизируются для поддержки нужд мно-
гозадачных ОС,изолируют и защищают
программы пользователя друг от друга и
от ОС.
 Уровни привилегии управляют использо-
ванием привилегированных команд,а так-
же командами ввода/вывода и доступом к
сегменту и дескриптору сегмента.
 В отличии от традиционных систем ос-
нованных на микропроцессоре для защи-
ты 80386 обеспечивает защиту как часть
интегрального блока управления памя-
тью,и не использует сложной внешней
аппаратуры и программного обеспечения.
 80386 предлагает также дополнительный
вид защиты,основанный на странничной
организации памяти.
 Уровни привилегии пронумерованы от 0
до 3-х.Уровень 0 является самым приви-
легированным.
======================================
---------Правила привилегии-----------
======================================
 80386 управляет доступом как к данным
так и к процедурам,между уровнями при-
вилегии задач согласно следующим
правилам:
 1)Данные помещенные в сегмент с уров-
нем привилегии Р,могут быть доступны
только с кодом работающим с уровнем
привилегии по крайней мере с такой же
степенью привилегии как Р.Сегмент или
процедура кода,с уровнем  привилегии
Р,может быть вызвана задачей,работа-
ющей на том же или менее привилегиро-
ванном уровне,чем Р.
======================================
---------УРОВНИ ПРИВИЛЕГИИ------------
======================================
---------Привилегия задач-------------
======================================
 В любой момент времени задача на
80386 всегда выполняется в одном из
4-х уровней привилегии.Текущий уровень
привилегии CPL определяет уровень при-
вилегии задачи.
 CPL задачи может быть изменен только
процедурой управления через дескрипто-
ры вентиля к кодовому сегменту с дру-
гим уровнем привилегии.Таким образом
программа выполняющаяся на уровне при-
вилегии 3,может вызвать программу ОС
на уровне привилегии 1 посредством ве-
нтиля,которая может вызвать,то что CPL
задачи будет установлен в 1,до того
момента,пока не будет выполнены прог-
раммы ОС.
======================================
-------Привилегия селектора RPL-------
======================================
 Уровень привилегии селектора опреде-
ляется полем RPL.RPL представляет со-
бой 2 бита селектора.RPL селектора ис-
пользуется только для установления ме-
ньшего уровня привилегии,чем текущий
уровень привилегии для использования
сегмента.
 Этот уровень называется эффективным
уровнем привилегии задачи.IPL опреде-
ляется как самый наименее привилигиро-
ванный уровень CPL задачи и RPL селек-
тора,таким образом если RPL селектора
равно 0,то значит CPL всегда определя-
ет уровень привилегии для возможного
доступа использования селектора.С дру-
гой стороны,если RPL=3,то доступ к се-
гментам на уровне 3 произойдет в неза-
висимости от CPL задачи.
 RPL обычно используется для того,что-
бы удостовериться,что указатели указы-
вающие на процедуру ОС-ме,не получают
доступ к данным,которые находятся на
более высоком уровне привилегии,чем
процедура,которая выработала указатель.
 Поскольку вырабатывающий программой
селектор может определить любое значе-
ние RPL.Это обеспечивается командой
подстройки RPL-ARPL,которая заставляет
вмешиваться в биты RPL,CPL постановщи-
ка.
======================================
--------Привилегия ввода/вывода-------
======================================
 Уровень привилегии ввода/вывода и
URPL позволяет коду ОС работающему при
CPL=0 определить самый менее привили-
герованный уровень при котором команды
ввода/вывода могут быть использованы.
 Исключение 13 - нарушение общей защи-
ты вырабатывается,когда команда ввода/
вывода предпринимается,когда CPL зада-
чи менее привилигерована,чем URPL.
 URPL размещается в битах 13,14 регис-
тра EFLAGS.
 Команды INT,INC,OUT вызывают исключе-
ние 13,если CPL больше,чем URPL.
 80386 имеет несколько команд для ус-
корения проверки указателя,помогает
поддерживать целостность системы,путем
проверки значения селектора,т.е отно-
шения его к соответствующему сегменту.
 Команда  ARPL {операнды,селектор,
регистр,функция} подстраивает требу-
емый уровень привилегии.Подстраивает
APL селектора,числовой максимум теку-
щего селектора,значение RPL и значение
RPL в регистре.
 Устанавливает нулевой флаг,если селе-
ктор RPL был изменен.
 Команда VERR {операнды,селектор,
функция} проверка для чтения.Устанав-
ливает нулевой флаг,если сегмент к ко-
торому относится селектор,может быть
прочитан.
 Команда VERW {операнд,селектор}
проверка для записи.Устанавливает ну-
левой флаг,если сегмент,который ссыла-
ется на селектор может быть записан.
 Команда LS   {операнды,регистры,селе-
ктор,функция} загружает предел сегмен-
та,считывая предел сегмента в регист-
ры,если правило привилегии и тип деск-
риптора это позволяют.
 Команда LAR {операнд,регистр,селек-
тор,функция} загрузка прав доступа.
Считывает байт права доступа дескрип-
тора в регистр,если позволяют правила
привилегии.
 Проверка указателя предотвращает об-
щую проблему апплекации при уровне
привилегии,вызывая программу ОС на
уровне привилегии 0.Передавая команду
ОС о плохом указателе,который разруша-
ет структуру данных пренадлежащих ОС,
если программа ОС использует команды
ARPL для обеспечения того,что APL се-
лектора имеет не больше уровень приви-
легии,чем уровень привилегии,который
имеет вызыватель.Доступ к дескриптору:
 В основном существуют 2 типа доступа
к сегменту,который вовлекает кодовый
сегмент,а также как передача управле-
ния и те которые вовлекают доступ к
данным.
 Опеделение возможности задачи полу-
чить доступ к сегменту,вовлекает тип
сегмента,который может получить доступ,
команду которая используется и тип де-
скриптора,а также CPL,RPL и DPL кото-
рые описаны выше.
 80386 делает проверку защиты.Сначало
процессор проверяет,не является ли се-
гмент нулевым сегментом.Неверный сег-
мент вырабатывает исключение 11,затем
он проверяет относится ли селектор к
правильному типу сегмента.
 Правило доступа к данным определяется
в разделе "Правила привилегии".
 Единственным исключением к этим пра-
ви-лам является читаемый,подтверждае-
мый кодовый сегмент,к которому можно
было получить доступ,но на другом уро-
вне привилегии,затем в конце концов
производится проверка правильности
привилегии.CPL сравнивается с EPL и,
если EPL более привилегирован,чем в
CPL,то вырабатывается исключение 13.
      Ошибка общей защиты:
 Правила касающиеся сегмента стека
слегка отличаются,чем те,которые вов-
лекают сегменты данных.
 Команда,которая загружает селектор
SS,должен относится к дескрипторам
данных для описуемых сегментов DPL и
RPL и должны равнятся CPL.
 Все остальные типы дескрипторов или
нарушение правил привилегии будут вы-
рабатывать исключение 13.
 Ошибка - стек не присутствует выраба-
тывает исключение 13.
 Обратите внимание,что исключение 11
используется для неприсутствующего ко-
да или сегмента данных.
=======================================
-----Передача  уровня  привилегии------
=======================================
 Передача управления внутри сегмента
происходит,когда селектор загружается
в регистр CS,для обычных систем боль-
шинство из этих передач являются прос-
то результатом вызова или перехода к
другой программе.
 Существуют 5 типов передач управле-
ния,которые суммируются в таблице.Мно-
гие из данных передач приводят к пере-
дачи уровня привилегии.Изменение уров-
ня привилегии выполняются только пос-
редством передачи управления,используя
вентили включения задачи и прерывания
или вентили ловушек.Передача управле-
ния может произойти,если селектор от-
носится с правильным типом дескрипто-
ра.Любое нарушение использования пра-
вил дескрипторов вызовит выработку ис-
ключения 13.
 Для обеспечения дальнейшей безопасно-
сти системы,всей передачи управления
подчиняются следующим правилам приви-
легии.
  Правила привилегии требуют,чтобы:
 1) Переходы уровня привилегии могут
 происходить,только через вентили.
 2) JMPS должно быть сделано к неподт-
 верждающим сегментам кода с такой же
 привилегией.
 CALL может быть сделано к неподтверж-
 денному сегменту кода с такой же при-
 вилегией через вентиль поля привиле-
гированного кода.
 Прерывания обрабатываются в пределах
 задачи подчиняются также правилам 
привилегии как и CALL.
  Сегменты подтверждения кода доступны
к уровням привилегии,которые являются
такими же или менее привилегированны-
ми,чем  CS  сегмента подтверждающего 
кода.Требуемый уровень привилегии RPL 
в селекторе,указывающий вентиль и CPL 
задачи,должны быть равны или больше 
привилегии,чем CPL вентиля.
 Сегмент кода,выбранный вентиль должен
быть таким же или более привилегиров-
анным,чем CPL задачи.
 Команды возвращения,которые отличают
задачи,могут возвратить управление
только к сегменту кода с такой же или
меньшей привилегией.Включение задачи
должно быть выполненно командами CALL,
JMP или INT,которые относятся или к
вентилю задачи или к сегменту состо-
яния задачи,чье DPL меньше или такой 
же привилегии как и CPL старой задачи.
Когда возвращаясь к оригинальному 
уровню привилегии,использование стека 
более низкой привилегии,устанавливает-
ся как часть IRET или RET команды.
=======================================
-----------Вентили вызова--------------
=======================================
 Одна из основных функций использова-
ния вентилей состоит в том,чтобы обес-
печить защищенный метод передачи при-
вилегии внутри задачи.
 Посколько ОС определяет все вентили в
системе,она может обеспечить,то что 
все вентили позволяют только ввод в 
несколько доверяемых процедур,таких 
которые определяют память или выполня-
ют ввод/вывод.Вентильные дескрипторы,
следуют правилам доступа данных приви-
легии,т.е. к вентилю может быть получ-
ен доступ задачей,если IPL равен или 
более привилегирован,чем DPL дескрип-
тора вентиля.
 Вентили следуют правилу передачи уп-
равления привилегии и таким образом 
могут передавать контроль только более
привилегированному уровню.
 Вентили вызова доступны только посре-
дством команд CALL и синтаксически ин-
дентичны к вызову нормальной подпрог-
раммы.
  Вентили прерывания и вентили ловушек
работают точно также как и вентили вы-
зова,но не происходит копирования па-
раметров.
 Единственной разницей между вентилями
ловушек и прерываний состоит в том,что
передача управления через вентиль пре-
рывания блокирует дальнейшее прерыва-
ние,т.е. IL бит устанавливается в нуль,
а вентили ловушки оставляют статус 
прерывания не измененным.
=======================================
----------Включение  задачи------------
=======================================
 Очень важным признаком в любой много-
задачной ОС является ее возможность
быстро переключать между задачами про-
цессы.80386 на прямую поддерживает да-
нные операции,обеспечивая включение 
задачи в аппаратуре.Операция включения 
задачи на 80386 сохраняет целостное 
состояние машины (все регистры,адрес-
ное пространство и цель предыдущей за-
дачи),загружает новое состояние управ-
ления,проводит контроль проверки защи-
ты и начинает выполнение новой задачи.
(Все это происходит примерно за 17 
мкс.)Так передача управления посредс-
твом вентиля операция включения задачи 
провоцируется выполнением внутрисегме-
нтной команды JMP или CALL,которые от-
носятся к сегменту состояния задачи 
TSS или дескриптору вентиля задачи в 
JDT или LDT.
 Команда INT исключения ловушки или
вентиля прерырания могут также вызвать
операцию включения задачи,если сущест-
вует дескриптор вентиля задачи соотне-
сенный к области дескриптора IDT.
 Дескриптор вентиля задачи содержит 
TSS селектор.80386 поддерживает и 286
и 386 стиль TSS.
 Предел 80386 TSS должен быть больше,
чем 0064H (002BH для 286 TSS),а может
быть больше 4 Гбайт.    (Нажми F10).
 В дополнительном пространстве TSS ОС
помещает дополнительную информацию,
такую как почему задача не активна,вре-
мя,которое задача провела в выполнении,
и открывает файлы принадлежащие к за-
даче.Каждая задача должна иметь соот-
несенные с ней TSS.
 Текущий TSS определяется специальным
регистром в 80386,который называется
регистр состояния задачи.Там,где
регистр содержит селектор,относящийся 
к сегменту дескриптора состояния,кото-
рый определяет текущий TSS.
 Регистры база и предел соотнесенные с
TR и TA,загружаются,когда TA загружает-
ся в новый селектор.Возвращение из за-
дачи выполняется командой IRET.Когда
IRET выполнен,управление передается на
задачу,которая была первой.
 Вложенная задача управляет функцией
команд IRET,если NT=0,то IRET выполня-
ет регулярное возвращения,а когда 
NT=1,то IRET выполняет операцию вклю-
чения задачи.
 Когда команда CALL или NT инициализи-
рует включения задачи,то новый TSS бу-
дет обозначен занятым.
 Бит NT,новой задачи,устанавливается
командой CALL или NT,инициализируя
включение задачи.Прерывание,которое не
вызывает включение задачи,очистит NT
(NT бит будет заново восстановлен пос-
ле выполнения программы обработки пре-
рывания).
 Сегмент состояния задачи 80386 обозна-
чается занятым,путем изменения поля ти-
па дескриптора.Использования селектора,
который относится к сегменту состояния
занятой задачи вызывает исключение 13.
 Бит виртуального режима VM использует-
ся для определения,является ли задача
виртуальной задачей 8086.Если VM=1,то
задача будет использовать механизм ре-
альной адресации.
 Состояние сопроцессора не сохраняется
автоматически,когда происходит включе-
ние задачи,потому что входящей задачей
может не использоваться сопроцессор.
 Когда 80386 включает задачу,то он ус-
танавливает бит TS.
 80386 повреждает первое использование
команды расширения процессора после
включения задачи и вырабатывает исклю-
чение 7 - возможности расширения про-
цессора.
 Программа обработки исключения для
исключения 7,может затем решить сохра-
нить ли состояние процессора.
 Исключение 7 - невозможность расшире-
ния процессора произойдет,когда будет
проведена попытка выполнить ESC
команду.












.
