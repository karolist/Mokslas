<HTML>
<HEAD>
<TITLE></TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#CC00CC" VLINK="#CC00CC" ALINK="#CC00CC">
<SCRIPT language="JavaScript">
<!--
if (document.location==parent.document.location)
document.write("<CENTER><H3><a href=\"index.htm\">Start here!</a></H3></CENTER>")
//-->
</SCRIPT>

<p>
<big><B>К</B></big>оманды приближенного определения обратных значений выполняются быстрее, 
чем операции деления для чисел с плавающей запятой и нахождения квадратного корня.
 Однако погрешность вычислений при этом увеличивается. 
<p>
<big><B>К</B></big>огда Вам не требуется максимальная точность результатов, используйте команды 
приближенных вычислений для ускорения работы программ.
<p>
<big><B>Н</B></big>а иллюстрации справа приведены примеры трех фрагментов программ для вычисления 
обратных значений чисел. Использование приближенной <b>команды 
<code><font color="#0000cc">rcpps</font></code></b> (первый пример) дает 
максимальную скорость при наименьшей точности. Во втором  примере <b>
(<code><font color="#0000cc">rcpps</font></code> с NR)</b> для увеличения
 точности результата применяется 
<A target="right" HREF="glossary.htm#new-raph">алгоритм Ньютона-Рафсона</A>. В третьем примере 
 выполняется <b>SIMD-команда деления</b>, что обеспечивает наивысшую точность результата
 ценой снижения производительности.
<p>
<big><B>Н</B></big>ажмите кнопку <b>Фрагмент кода</b> и просмотрите пошаговый ход выполнения вычислений.


</BODY>
</HTML>
