<HTML>
<HEAD>
<TITLE>Словарь терминов</TITLE>
<script language="JavaScript">
<!--
function goBack() {
 if (navigator.appName!="Netscape" && parseInt(navigator.appVersion)>3 && clkCount<2) {
  top.showlr();
 }
 else {
  history.back(); clkCount=2;
 }
}
//-->
</script>

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" link="#0000CC" alink="#0000CC" vlink="#0000CC" onLoad="clkCount=0" onClick="clkCount++">

<p>
<map NAME="letterus">
<area SHAPE="RECT" COORDS="1,0 15,19"   HREF="#r_a">
<area SHAPE="RECT" COORDS="16,0 30,19"  HREF="#r_b">
<area SHAPE="RECT" COORDS="31,0 45,19"  HREF="#r_v">
<area SHAPE="RECT" COORDS="46,0 59,19"  HREF="#r_g">
<area SHAPE="RECT" COORDS="60,0 74,19"  HREF="#r_d">
<area SHAPE="RECT" COORDS="75,0 89,19"  HREF="#r_e">
<area SHAPE="RECT" COORDS="90,0 104,19" HREF="#r_zh">
<area SHAPE="RECT" COORDS="105,0 119,19" HREF="#r_z">
<area SHAPE="RECT" COORDS="120,0 134,19" HREF="#r_i">
<area SHAPE="RECT" COORDS="135,0 149,19" HREF="#r_k">
<area SHAPE="RECT" COORDS="150,0 164,19" HREF="#r_l">
<area SHAPE="RECT" COORDS="165,0 179,19" HREF="#r_m">
<area SHAPE="RECT" COORDS="180,0 194,19" HREF="#r_n">
<area SHAPE="RECT" COORDS="195,0 209,19" HREF="#r_o">
<area SHAPE="RECT" COORDS="1,0 15,39"    HREF="#r_p">
<area SHAPE="RECT" COORDS="16,20 30,39"  HREF="#r_r">
<area SHAPE="RECT" COORDS="31,20 45,39"  HREF="#r_s">
<area SHAPE="RECT" COORDS="46,20 59,39"  HREF="#r_t">
<area SHAPE="RECT" COORDS="60,20 74,39"  HREF="#r_u">
<area SHAPE="RECT" COORDS="75,20 89,39"  HREF="#r_f">
<area SHAPE="RECT" COORDS="90,20 104,39" HREF="#r_h">
<area SHAPE="RECT" COORDS="105,20 119,39" HREF="#r_c">
<area SHAPE="RECT" COORDS="120,20 134,39" HREF="#r_ch">
<area SHAPE="RECT" COORDS="135,20 149,39" HREF="#r_sh">
<area SHAPE="RECT" COORDS="150,20 164,39" HREF="#r_sch">
<area SHAPE="RECT" COORDS="165,20 179,39" HREF="#r_oe">
<area SHAPE="RECT" COORDS="180,20 194,39" HREF="#r_yu">
<area SHAPE="RECT" COORDS="195,20 209,39" HREF="#r_ya">
</map>

<map NAME="tabs">
<area SHAPE="RECT" COORDS="1,0 47,19"   HREF="#russian">
<area SHAPE="RECT" COORDS="48,0 95,19"  HREF="#english">
<area SHAPE="RECT" COORDS="96,0 190,19"  HREF="instruct.htm#top">
</map>

<p>&nbsp;<p>

<a NAME="russian"></a>
<nobr><img SRC="button/tabs.gif" usemap="#tabs" border=0 width=210 height=19
><br><img SRC="button/letterus.gif" usemap="#letterus" alt="Русский алфавит" border=0 width=210 height=40
></nobr>


<p>
<B>Словарь русских терминов</B>
<br>
<small>
Чтобы вернуться, нажмите кнопку
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>
</small>

<p>

<small>

<a NAME="r_a"></a>
<p>
<b>А</b>
<br><a href="#new-raph">алгоритм Ньютона-Рафсона</a>
<br><a href="#alpha">альфа-компонента</a>
<br><a href="#alphasat">альфа-порог</a>
<br><a href="#exception">арифметические исключения</a>
<br><a href="#ia">архитектура Intel</a>
<br><a href="#x87">архитектура x87</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>

<p>
<a NAME="r_b"></a>
<p>
<b>Б</b>
<br><a href="#writecomb">буфер записи в память</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="r_v"></a>
<p>
<b>В</b>
<br><a href="#fxrstor">восстановление состояния</a>
<br><a href="#temporal">временная локализация</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="r_g"></a>

<a NAME="r_d"></a>
<p>
<b>Д</b>
<br><a href="#temporal">данные с временной локализацией</a>
<br><a href="#spatial">данные с пространственной локализацией</a>
<br><a href="#nontemporal">данные со слабой локализацией</a>
<br><a href="#dynamic">динамическая перегруппировка данных</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="r_e"></a>

<a NAME="r_zh"></a>


<a NAME="r_z"></a>
<p>
<b>З</b>
<br><a href="#ldmxcsr">загрузка регистра MXCSR</a>
<br><a href="#writealloc">запись без переноса в кэш вышестоящего уровня</a> (non-write allocate)
<br><a href="#movntps">запись упакованных SPFP-данных</a>
<br><a href="#movntq">запись упакованных целочисленных данных</a>
<br><a href="#writecomb">запись с буферизацией</a> (write combined)
<br><a href="#swap">зеркальное отражение регистра</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>



<a NAME="r_i"></a>
<p>
<b>И</b>
<br><a href="#andps">И</a> (поразрядная логическая операция)
<br><a href="#orps">ИЛИ</a> (поразрядная логическая операция)
<br><a href="#xorps">исключающее ИЛИ</a> (поразрядная логическая операция)
<br><a href="#exception">исключения</a>
<br><a href="#flush-to-zero">исчезновение порядка</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="r_k"></a>
<p>
<b>К</b>
<br><a href="#cmp-instr">команды сравнения</a>
<br><a href="#context">контекст</a>
<br><a href="#movaps">копирование выровненных SPFP-данных</a>
<br><a href="#movups">копирование невыровненных SPFP-данных</a>
<br><a href="#movlps">копирование младших элементов SPFP-данных</a>
<br><a href="#movhps">копирование старших элементов SPFP-данных</a>
<br><a href="#movss">копирование одного элемента SPFP-данных</a>
<br><a href="#prefetch">кэширование</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>



<a NAME="r_l"></a>
<p>
<b>Л</b>
<br><a href="#andps">логическое И</a>
<br><a href="#andnps">логическое НЕ-И</a>
<br><a href="#orps">логическое ИЛИ</a>
<br><a href="#xorps">логическое исключающее ИЛИ</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>




<a NAME="r_m"></a>
<p>
<b>М</b>
<br><a href="#pminmaxub">максимум упакованных байтов без знака</a>
<br><a href="#mask-unmask">маска арифметических исключений</a>
<br><a href="#pminmaxub">минимум упакованных байтов без знака</a>
<br><a href="#mmx-reg">MMX-регистры</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>




<a NAME="r_n"></a>
<p>
<b>Н</b>
<br><a href="#andnps">НЕ-И</a> (поразрядная логическая операция)
<br><a href="#8imm_i">непосредственный операнд команды pshufw</a>
<br><a href="#8imm">непосредственный операнд команды shufps</a>
<br><a href="#unordered">несравнимые данные</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>





<a NAME="r_o"></a>
<p>
<b>О</b>
<br><a href="#cvtss2si">округление младшего элемента SPFP-данных</a>
<br><a href="#cvtps2pi">округление упакованных SPFP-данных</a>
<br><a href="#cvttss2si">отбрасывание дробной части младшего элемента SPFP-данных</a>
<br><a href="#cvttps2pi">отбрасывание дробной части упакованных SPFP-данных</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>






<a NAME="r_p"></a>
<p>
<b>П</b>
<br><a href="#cvtsi2ss">преобразование 32-разрядного целого в элемент SPFP-данных</a>
<br><a href="#cvtpi2ps">преобразование упакованных целых в элементы SPFP-данных</a>
<br><a href="#3d">преобразования трехмерных объектов</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>






<a NAME="r_r"></a>
<p>
<b>Р</b>
<br><a href="#brcast">размножение элемента регистра</a>
<br><a href="#eflags">регистр EFLAGS</a>
<br><a href="#mxcsr">регистр MXCSR</a>
<br><a href="#mask-unmask">режим обработки арифметических исключений</a>
<br><a href="#rounding">режим округления</a>
<br><a href="#flush-to-zero">режим flush-to-zero</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>





<a NAME="r_s"></a>
<p>
<b>С</b>
<br><a href="#weakordered">слабо упорядоченный доступ</a>
<br><a href="#context">состояние процессора</a>
<br><a href="#fxsave">сохранение состояния</a>
<br><a href="#stmxcsr">сохранение регистра MXCSR</a>
<br><a href="#comiss">сравнение скалярных SPFP-данных</a>
<br><a href="#static">статическая перегруппировка данных</a>
<br><a href="#cachehints">суффиксы команд кэширования</a>
<br><a href="#suffix">суффиксы команд преобразования типов</a>
<br><a href="#cmp-instr">сравнение упакованных SPFP-данных</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>




<a NAME="r_t"></a>
<p>
<b>Т</b>
<br><a href="#mmx">технология MMX&#153;</a>
<br><a href="#datatype">типы целочисленных данных</a>
<br><a href="#precision">точность 11 бит</a>
<br><a href="#3d">трехмерные объекты</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>




<a NAME="r_u"></a>
<p>
<b>У</b>
<br><a href="#pmulhuw">умножение слов без знака</a>
<br><a href="#prefetch">упреждаюее кэширование</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>




<a NAME="r_f"></a><p>
<p>
<b>Ф</b>
<br><a href="#eflags">флаги EFLAGS</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="r_h"></a><p>
<a NAME="r_ch"></a><p>
<a NAME="r_sh"></a><p>
<a NAME="r_sch"></a><p>
<a NAME="r_oe"></a><p>
<a NAME="r_yu"></a><p>
<a NAME="r_ya"></a><p>


<a NAME="r_c"></a><p>
<p>
<b>Ц</b>
<br><a href="#integer">целочисленные элементы данных</a>
<br><a href="#unsigned">целые числа без знака</a>
<br><a href="#signed">целые числа со знаком</a>
<br><a href="#rotate">циклический сдвиг</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>

</small>


<p>&nbsp;<br>


<p><A NAME="new-raph"></a>
<b><font color="#0000CC">Алгоритм Ньютона-Рафсона</font></b><br>

Численный алгоритм, обеспечивающий повышение точности результата в приближенных расчетах.
Например, если надо повысить точность величины <nobr><font color="#0000CC"><code>rcpps(a)</code></font></nobr>, 
обратной к <font color="#0000CC"><code>a</code></font>,
то алгоритм Ньютона-Рафсона дает следующее выражение:<br>
<font color="#0000CC"><i>x</i> = <nobr>2<code>*rcpps(a)</code>
 <code>–</code> <code>a*rcpps(a)<sup>2</sup></code></nobr></font>

<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="alpha"></a>
<b><font color="#0000CC">Альфа-компонента</font></b><br>

Используется в некоторых случаях как четвертая компонента RGB-представления, 
моделирующая прозрачность изображения или слоя.
<a href="javascript:goBack()"
><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>


<img src="space.gif" width=1 height=199>


<p><A NAME="alphasat"></a>
<b><font color="#0000CC">Альфа-порог</font></b><br>
Для постепенного уменьшения (увеличения) цветовой насыщенности изображения
часто применяется прием "альфа-порог" <big><code>-</code></big> пересчет 
каждой из цветовых RGB-компонент с учетом ее максимально (минимально) 
допустимого значения, равного альфа-компоненте.<br>

<a href="javascript:goBack()"
><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>


<img src="space.gif" width=1 height=199>



<p><A NAME="exception"></a><br>
<b><font color="#0000CC">Арифметические исключения</font></b><br>

В этом учебном курсе под <i>арифметическими исключениями</i> понимаются
следующие исключения, генерируемые процессором 
Pentium&reg;&nbsp;<font face="sans-serif">III</font> 
при вычислениях с использованием новых SPFP-команд:
<li> Недействительная операция (<font color="#0000CC">#I</font>)
<li> Денормализованный операнд (<font color="#0000CC">#D</font>)
<li> Деление на нуль (<font color="#0000CC">#Z</font>)
<li> Переполнение  (<font color="#0000CC">#O</font>)
<li> Исчезновение порядка (<font color="#0000CC">#U</font>)
<li> Неточный результат (<font color="#0000CC">#P</font>)
</ul>
Обнаружение и обработка каждого из этих исключений управляется 
флагами состояния (биты 0 <code><big>-</big></code> 5) и битовой маской 
(биты 7 <code><big>-</big></code> 12) в регистре <font color="#0000CC">MXCSR</font>.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="ia"></a>
<b><font color="#0000CC">Архитектура Intel (IA)</font></b><br>

Для ознакомления с архитектурой Intel рекомендуются следующие источники:<br>
<p><small>
<LI> Руководства разработчика по архитектуре Intel <i>(Intel Architecture Software Developer's Manuals, ч.1,2,3, код 243190,
243191,243192)</i></LI>
<LI>Руководство по оптимизации для  архитектуры Intel (<i>Intel Architecture Optimization Manual, код 242816) </i></LI>
<LI>Курс <I>Оптимизация программ для процессора Pentium</I>® (<I>Optimizing Applications for the Pentium Processor</I>)</LI>
<li>Курс <I>Обзор микроархитектуры процессора Pentium Pro (Pentium Pro Microarchitecture Overview)</i> </li>
<li>Курс <I>Введение в технологию MMX&#153; (Introduction to MMX&#153; Technology)</i> </li>
<li>Курс <I>Оптимизация программ для процессоров Pentium&reg;&nbsp;<font face="sans-serif">II</font> и Pentium Pro 
(Optimizing for the Pentium&reg;&nbsp;<font face="sans-serif">II</font> and Pentium Pro Processors)</i> </li>

<LI> Web-сайт Intel для разработчиков: <font color="#0000CC">http://developer.intel.com</font></LI>
</small>


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>


<p><A NAME="fxrstor"></a>
<b><font color="#0000CC">Восстановление состояния</font></b><br>
Команда <font color="#0000CC">fxrstor</font> 
загружает предварительно сохраненную информацию о состоянии регистров
 данных с плавающей запятой, MMX-регистров, 
а также новых  регистров процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font>
 из 512-байтной области памяти в соответствующие регистры. <br>
Начальный адрес  области памяти при загрузке должен быть выровнен на 16 байт.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="nontemporal"></a>
<b><font color="#0000CC">Данные со слабой локализацией</font></b><br>
Те данные, к которым программа обращается нерегулярно и через значительные
интервалы времени, являются данными со <b>слабой локализацией</b>.<br>
Примером может являться набор данных, описывающих трехмерный объект, 
если обращение к каждой вершине этого набора происходит только один раз при генерации 
очередного кадра.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>


<p><A NAME="temporal"></a>
<b><font color="#0000CC">Данные с временной локализацией</font></b><br>
Если программа обращается к одной и той же ячейке памяти большое число раз 
за короткий промежуток времени, то эта ячейка содержит данные с <b>временной локализацией</b>.<br>
Такая ситуация характерна для циклов.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>


<p><A NAME="spatial"></a>
<b><font color="#0000CC">Данные с пространственной локализацией</font></b><br>
Пространственная локализация данных имеет место,
если программа последовательно обращается к ячейкам памяти с 
близкими друг к другу адресами.
Например, если программа обрабатывает логически однородные данные 
(скажем, элементы массива), причем каждое следующее обращение наиболее вероятно к элементу, 
смежному с предшествующим, то мы имеем дело с пространственной локализацией данных.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>


<p><A NAME="dynamic"></a>
<b><font color="#0000CC">Динамическая перегруппировка данных</font></b><br>

Данные, хранящиеся в памяти мо модели AOS, можно перестроить (транспонировать)
в схему SOA по ходу выполнения программы, используя для этого SIMD-команды. 
<br>Подобная динамическая перегруппировка данных обеспечивает повышение производительности
SIMD-вычислений в программе по сравнению с обработкой данных, хранящихся по модели AOS.
<br> Однако динамическая перегруппировка требует дополнительных затрат вычислительных 
ресурсов, и уступает по эффективности статической перегруппировке данных.


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="ldmxcsr"></a>
<b><font color="#0000CC">Загрузка регистра MXCSR</font></b><br>
Команда <font color="#0000CC">ldmxcsr</font>
загружает из памяти 32-разрядное слово состояния и управления в  регистр 
<font color="#0000CC">MXCSR</font>.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>
<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;



<p><A NAME="writealloc"></a>
<b><font color="#0000CC">Запись без переноса в кэш вышестоящего уровня (non-write allocate) </font></b><br>

В режиме записи <b>non-write allocate</b> сохраняемые данные записываются только в кэш 
соответствующего уровня (если эти данные уже кэшированы  ранее), или только в память
(если данные не кэшированы). Одновременного <i>переноса сохраняемых данных в кэш вышестоящего 
уровня ("ближе" к процессору) не происходит</i>. Такой режим записи полезен при работе с данными, доступ к которым 
осуществляется нерегулярно. Предотвращается "засорение" кэш-памяти и лишние пересылки по шине.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="movntps"></a>
<b><font color="#0000CC">Некэширующая команда записи  упакованных SPFP-данных</font></b><br>

Команда <font color="#0000CC">movntps</font> копирует четыре элемента FP-данных из 
XMM-регистра непосредственно
в  память и не меняет содержимое кэш-памяти, если записываемые данные не кэшированы.
Если же данные кэшированы, 
то  кэш-линия обновляется, а прямой записи в память НЕ происходит.<br>
Команда <font color="#0000CC">movntps</font> обычно применяется для записи слабо локализованных данных.<br>
Адрес данных в памяти должен быть выровнен на 16 байт, в противном случае генерируется 
исключение.


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="movntq"></a>
<b><font color="#0000CC">Некэширующая команда записи упакованных целочисленных данных</font></b><br>

Команда <font color="#0000CC">movntq</font> копирует 64 бита содержимого MMX-регистра 
(8 байт, 4 слова, 2 двойных слова, 64-разрядное слово) непосредственно в память 
и не меняет содержимое кэша, если записываемые данные не кэшированы.
Если же  данные кэшированы, 
то  кэш-линия обновляется, а прямой записи в память НЕ происходит.<br>
Команда <font color="#0000CC">movntq</font> обычно применяется для записи слабо локализованных данных.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="writecomb"></a>
<b><font color="#0000CC">Запись с буферизацией (write-combining, WC)</font></b><br>

В этом режиме данные записываются не в  кэш, а в 32-байтный буфер записи. 
Запись в основную память производится только после заполнения буфера записи.
При правильном использовании такой режим записи может уменьшить число обращений в память.<br>
Режим записи с буферизацией особенно полезен в тех случаях, когда число
обращений на запись существенно превосходит число обращений на чтение, например, 
при формировании буфера кадров.


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>





<p><A NAME="swap"></a>
<b><font color="#0000CC">Зеркальное отражение регистра</font></b><br>

Чтобы выполнить "зеркальную" перестановку 4 элементов регистра, 
используется команда <font color="#0000CC">shufps</font> (для XMM-регистров) 
или <font color="#0000CC">pshufw</font> (для MMX-регистров). 

<p>
Если указать в качестве третьего (непосредственного) операнда
значение <font color="#0000CC">1Bh</font>, то эти команды переставляют 
старший элемент регистра с младшим, а второй элемент с третьим.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="cmp-instr"></a>
<b><font color="#0000CC">Команды сравнения</font></b><br>
Команды сравнения и установки маски производят над элементами данных как параллельные, 
так и скалярные операции, проверяя выполнение следующих условий:


<TABLE border=0 cellspacing=0 cellpadding=1 bgcolor="#FFFFCC" width=97%> 
<TR>
<TH align="left"><small>Параллельная команда</small></TH>
<TH align="left"><small>Скалярная команда</small></TH>
<TH align="left"><small>Условие</small></TH>
</TR>

<TR>
<TD><code><font color="#0000cc">cmpeqps</font></code></TD>
<TD><code><font color="#0000cc">cmpeqss</font></code></TD>
<TD><small>равно</small></TD>
</TR>
<TR>
<TD><code><font color="#0000cc">cmpltps	</font></code></TD>
<TD><code><font color="#0000cc">cmpltss	</font></code></TD>
<TD><small>меньше</small></TD>
</TR>
<TR>
<TD><code><font color="#0000cc">cmpleps</font></code></TD>
<TD><code><font color="#0000cc">cmpless</font></code></TD>
<TD><small>меньше или равно</small></TD>
</TR>
<TR>
<TD><code><font color="#0000cc">cmpunordps</font></code></TD>
<TD><code><font color="#0000cc">cmpunordss</font></code></TD>
<TD><small>несравнимы</small></TD>
</TR>
<TR>
<TD><code><font color="#0000cc">cmpneqps</font></code></TD>
<TD><code><font color="#0000cc">cmpneqss</font></code></TD>
<TD><small>не равно</small></TD>
</TR>
<TR>
<TD><code><font color="#0000cc">cmpnltps</font></code></TD>
<TD><code><font color="#0000cc">cmpnltss</font></code></TD>
<TD><small>не меньше</small></TD>
</TR>
<TR>
<TD><code><font color="#0000cc">cmpnleps</font></code></TD>
<TD><code><font color="#0000cc">cmpnless</font></code></TD>
<TD><small>не {меньше или равно}</small></TD>
</TR>
<TR>
<TD><code><font color="#0000cc">cmpordps</font></code></TD>
<TD><code><font color="#0000cc">cmpordss</font></code></TD>
<TD><small>сравнимы </small></TD>
</TR>
</TABLE>

Проверку условий "больше", "больше или равно", "не больше" можно выполнить, поменяв операнды местами.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>


<p><A NAME="context"></a>
<b><font color="#0000CC">Состояние процессора</font></b><br>
Состояние процессора архитектуры Intel <big><code>-</code></big>
это состояние всех его регистров, доступных программе. 
Сохранение и восстановление состояния процессора
необходимо при переключении контекста задач. 
<p>
Новыми компонентами процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font>
являются XMM-регистры и регистр MXCSR. 

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>
<p>&nbsp;<p>&nbsp;<p>&nbsp;

<p><A NAME="movaps"></a>
<b><font color="#0000CC">Копирование выровненных упакованных SPFP-данных</font></b><br>

Команда <font color="#0000CC">movaps</font>  копирует четыре FP–элемента одним из следующих способов:
<ul>
<li> из памяти в XMM-регистр
<li> из XMM-регистра в память
<li> из одного XMM-регистра в другой
</ul>
Линейный адрес  соответствует адресу младшего байта группы данных в памяти.<br>
Обращение в память должно быть по адресу, кратному 16 байтам; 
в противном случае генерируется исключение.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>


<p><A NAME="movups"></a>
<b><font color="#0000CC">Копирование невыровненных упакованных SPFP-данных</font></b><br>
Команда <font color="#0000CC">movups</font>  копирует четыре FP–элемента одним из следующих способов:
<ul>
<li> из памяти в XMM-регистр
<li> из XMM-регистра в память
<li> из одного XMM-регистра в другой
</ul>
Линейный адрес  соответствует адресу младшего байта группы данных в памяти.<br>
Команда movups применяется для обращения к <b>невыровненным</b> данным в памяти.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="movlps"></a>
<b><font color="#0000CC">Копирование младших элементов упакованных SPFP-данных</font></b><br>

Команда <font color="#0000CC">movlps</font>  копирует два FP–элемента одним из следующих способов:
<ul>
<li> из памяти в два младшие элемента XMM-регистра
<li> из двух младших элементов XMM-регистра в память
</ul>
При копировании данных из памяти в XMM-регистр, два старших элемента этого
 регистра не изменяются.<br>
Линейный адрес  соответствует адресу младшего байта группы данных в памяти.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="movhps"></a>
<b><font color="#0000CC">Копирование старших элементов упакованных SPFP-данных</font></b><br>

Команда <font color="#0000CC">movhps</font>  копирует два FP–элемента одним из следующих способов:
<ul>
<li> из памяти в два старшие элемента XMM-регистра
<li> из двух старших элементов XMM-регистра в память
</ul>
При копировании данных из памяти в XMM-регистр, два младших элемента этого
регистра не изменяются.<br>
Команда работает с адресом младшего байта группы данных в памяти.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="movss"></a>
<b><font color="#0000CC">Копирование скалярных SPFP-данных</font></b><br>

Команда <font color="#0000CC">movss</font> копирует один 32-рарядный FP–элемент одним из следующих способов: 
<ul>
<li> из памяти в младший элемент  XMM-регистра
<li> из младшего элемента XMM-регистра в память
<li> из младшего элемента одного XMM-регистра в младший элемент  другого XMM-регистра
</ul>
При копировании 32 битов данных из памяти в XMM-регистр,  все 96 оставшихся 
старших битов этого регистра обнуляются.<br>
Команда работает с адресом младшего байта группы данных в памяти.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="attenuation"></a>
<b><font color="#0000CC">Коэффициент ослабления света</font></b><br>
В задачах расчета освещенности объектов, фактор атмосферного 
<b>ослабления освещенности</b> определяется как коэффициент ослабления интенсивности 
света за счет атмосферных явлений (например, тумана). 
<br>Этот коэффициент всегда должен быть не меньше <font color="#0000CC">1</font>; в некоторых случаях 
возможны ограничения и на максимально допустимое значение.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>





<p><A NAME="andps"></a>
<b><font color="#0000CC">Логическое И для SPFP-данных</font></b><br>

Команда <font color="#0000CC">andps</font> вычисляет поразрядное логическое&nbsp;И 
своих 128-битных входного и выходного операндов.<br>
Входной операнд может находиться в XMM-регистре или в памяти. Выходной операнд 
должен находиться в XMM-регистре.
<br>Каждый бит результата полагается равным <font color="#0000CC">1</font>,
если оба соответствующих бита операндов
равны <font color="#0000CC">1</font>, и равным <font color="#0000CC">0</font> в противном случае. 
Результат записывается в выходной операнд.
 
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="andnps"></a>
<b><font color="#0000CC">Логическое НЕ-И для SPFP-данных</font></b><br>

Команда <font color="#0000CC">andnps</font> сначала инвертирует все разряды 
выходного операнда (логическое&nbsp;НЕ), а затем вычисляет поразрядное логическое&nbsp;И  
входного и инвертированного выходного операндов.
<br>
Входной операнд может находиться в XMM-регистре или в памяти. Выходной операнд 
должен находиться в XMM-регистре.
<br>Каждый бит результата полагается равным <font color="#0000CC">1</font>,
если для входного операнда соответствующий бит равен <font color="#0000CC">1</font>,
а для выходного – равен <font color="#0000CC">0</font>. 
В противном случае присваивается <font color="#0000CC">0</font>. Результат записывается в выходной операнд.
 
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199> 




<p><A NAME="orps"></a>
<b><font color="#0000CC">Логическое ИЛИ для SPFP-данных</font></b><br>

Команда <font color="#0000CC">orps</font> вычисляет поразрядное логическое&nbsp;ИЛИ своих 128-битных входного и 
выходного операндов.
<br>
Входной операнд может находиться в XMM-регистре или в памяти. Выходной операнд 
должен находиться в XMM-регистре.
<br>Каждый бит результата полагается равным <font color="#0000CC">0</font>, 
если оба соответствующих бита операндов
 равны <font color="#0000CC">0</font>, и равным <font color="#0000CC">1</font> в противном случае.
 Результат записывается в выходной операнд.
 
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199> 




<p><A NAME="xorps"></a>
<b><font color="#0000CC">Логическое исключающее ИЛИ для SPFP-данных</font></b><br>

Команда <font color="#0000CC">xorps</font> вычисляет поразрядное логическое исключающее&nbsp;ИЛИ
своих 128-битных входного и выходного операндов.
<br>
Входной операнд может находиться в XMM-регистре или в памяти. Выходной операнд 
должен находиться в XMM-регистре.
<br>Каждый бит результата полагается равным <font color="#0000CC">1</font>, 
если соответствующие биты операндов содержат различные значения. 
В случае одинаковых значений присваивается <font color="#0000CC">0</font>. Результат 
записывается в выходной операнд.
 
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199> 




<p><A NAME="pminmaxub"></a>
<b><font color="#0000CC">Максимум и минимум для упакованных байтов без знака </font></b><br>
Целочисленные команды <font color="#0000CC">pminub</font> и <font color="#0000CC">pmaxub</font>
попарно сравнивают байтовые целые числа без знака в двух 64-разрядных операндах
и записывают, соответственно, минимальные и максимальные значения в выходной MMX-регистр.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>





<p><A NAME="mmx-reg"></a>
<b><font color="#0000CC">MMX-регистры</font></b><br>
Данные используемых в технологии MMX типов могут загружаться в любой из 
восьми MMX-регистров. MMX-команды обращаются к этим регистрам напрямую по именам 
<code><font color="#0000cc">ММ0,...,ММ7</font></code>.<br>
Физически MMX-регистры накладываются на регистры данных с плавающей запятой.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="8imm"></a>
<b><font color="#0000CC">8-разрядный непосредственный операнд для команды <code>shufps</code></font></b><br>

Непосредственный операнд есть значение данных, содержащееся прямо в команде, 
а не находящееся в регистре или в памяти по адресу, указанному в команде. <br>
В команде перестановки <code><font color="#0000CC">shufps</font></code>
непосредственный операнд имеет четыре 2-разрядных поля:<br>
два младших поля предназначены для выбора двух элементов из первого  операнда 
и записи их в два младших элемента выходного операнда
 (<font color="#0000CC">xmm[31-0]</font> и <font color="#0000CC">xmm[63-32]</font>);<br>  
два старших поля предназначены для выбора двух элементов из второго операнда
 и записи их в два старших элемента выходного операнда 
(<font color="#0000CC">xmm[95-64]</font> и <font color="#0000CC">xmm[127-96]</font>).
В каждом 2-разрядном поле может быть одно из следующих значений:
 <font color="#0000CC">00, 01, 10</font> или <font color="#0000CC">11</font> (0, 1, 2 или 3). 
Эти числа однозначно определяют элемент регистра: 
<font color="#0000CC">00</font> указывает на младший элемент,
 <font color="#0000CC">01</font> – на следующий за ним, 
<font color="#0000CC">10</font> – на третий элемент и <font color="#0000CC">11</font> – на старший элемент операнда.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>



<p><A NAME="8imm_i"></a>
<b><font color="#0000CC">8-разрядный непосредственный операнд для команды <code>pshufw</code></font></b><br>

Непосредственный операнд есть значение данных, содержащееся прямо в команде, 
а не находящееся в регистре или в памяти по адресу, указанному в команде. <br>
В целочисленной команде перестановки <code><font color="#0000CC">pshufw</font></code>
непосредственный операнд имеет четыре 2-разрядных поля,
каждое из которых определяет запись в соответствующий элемент выходного операнда:<br>
младшее поле отвечает за запись в младший элемент (<font color="#0000CC">mm[15-0]</font>),
второе поле - во второй элемент (<font color="#0000CC">mm[31-16]</font>) и т.д.
В каждом 2-разрядном поле может быть одно из следующих значений:
 <font color="#0000CC">00, 01, 10</font> или <font color="#0000CC">11</font> (0, 1, 2 или 3). 
Эти числа однозначно определяют выбираемые элементы входного операнда: 
<font color="#0000CC">00</font> указывает на младший элемент,
 <font color="#0000CC">01</font> – на следующий за ним, 
<font color="#0000CC">10</font> – на третий элемент и <font color="#0000CC">11</font> – на старший элемент операнда.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="unordered"></a>
<b><font color="#0000CC">Несравнимые данные</font></b><br>
Если выполняется арифметическое сравнение элементов двух операндов,
и хотя бы один из этих элементов имеет значение NaN (<b>N</b>ot <b>a</b> <b>N</b>umber - не число),
то результатом сравнения будет "unordered" (несравнимы).

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="truncate"></a>
<b><font color="#0000CC">Округление с отбрасыванием дробной части</font></b><br>
При работе в этом режиме, положительные числа с плавающей запятой округляются в
меньшую сторону до ближайшего целого, а отрицательные – в большую сторону до ближайшего целого.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="3d"></a>
<b><font color="#0000CC">Преобразования 3D-объектов </font></b><br>
Преобразования трехмерных объектов являются одним из этапов обработки в 3D-геометрии.
Как правило, объект определяется в пространстве моделирования в виде совокупности
вершин, ребер и граней. Каждый раз, когда изменяется положение,
ориентация или форма объекта, происходит пересчет объекта в "мировое" пространство. 
В этом пространстве определяются мировые координаты точек, в которые отображаются вершины объекта.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>






<p><A NAME="cvtps2pi"></a>
<b><font color="#0000CC">Преобразование упакованных SPFP-данных в целые (с округлением)</font></b><br>
Команда <font color="#0000CC">cvtps2pi</font>  преобразует FP-числа из двух младших 
элементов входного операнда в целые 32-разрядные числа со знаком, записываемые в два элемента
выходного MMX-регистра.<br>
Входной операнд может находиться в XMM-регистре или в памяти. 
Выходной операнд должен находиться в XMM-регистре.<br>
При необходимости результаты округляются в соответствии со значением поля 
<font color="#0000CC">RC</font> в  регистре
<font color="#0000CC">MXCSR</font>.


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>





<p><A NAME="cvtss2si"></a>
<b><font color="#0000CC">Преобразование одного SPFP-значения в целое (с округлением)</font></b><br>
Команда <font color="#0000CC">cvtss2si</font> преобразует одно FP-число, содержащееся
в младшем элементе входного операнда, в целое 32-разрядное число со знаком, записываемое
в выходной целочисленный регистр.<br>
Входной операнд может находиться в XMM-регистре или в памяти. 
Выходной операнд должен находиться в целочисленном регистре. <br>
При необходимости результат округляется в соответствии со значением поля 
<font color="#0000CC">RC</font> в  регистре
<font color="#0000CC">MXCSR</font>.
 
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>





<p><A NAME="cvttps2pi"></a>
<b><font color="#0000CC">Преобразование упакованных SPFP-данных в упакованные целые 
(с отбрасыванием дробной части)</font></b><br>
Команда <font color="#0000CC">cvttps2pi</font> преобразует FP-числа из двух младших 
элементов входного операнда в целые 32-разрядные числа со знаком, записываемые в два 
элемента выходного MMX-регистра.<br>
Входной операнд может находиться в XMM-регистре или в памяти.
Выходной операнд должен находиться в XMM-регистре. <br>
Когда  необходимо округление, дробная часть результата отбрасывается, <i>без учета</i> значения поля 
<font color="#0000CC">RC</font> в регистре <font color="#0000CC">MXCSR</font>.
Используйте эту команду для преобразований, где при округлении требуется только отбрасывание дробной части.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>






<p><A NAME="cvttss2si"></a>
<b><font color="#0000CC">Преобразование одного SPFP-значения в целое (с отбрасыванием дробной части)</font></b><br>
Команда <font color="#0000CC">cvttss2si</font> преобразует одно FP-число, содержащееся
 в младшем элементе входного операнда, в целое 32-разрядное число со знаком, записываемое
 в выходной целочисленный регистр.<br>
Входной операнд может находиться в XMM-регистре или в памяти. 
Выходной операнд должен находиться в целочисленном регистре. <br>
Когда  необходимо округление, дробная часть результата отбрасывается,
 <b>без учета</b> значения поля 
<font color="#0000CC">RC</font> в  регистре <font color="#0000CC">MXCSR</font>.
 Используйте эту команду для преобразований, где требуется только отбрасывание дробной части при округлении.

 
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="cvtpi2ps"></a>
<b><font color="#0000CC">Преобразование упакованных целых в упакованные SPFP-числа</font></b><br>
Команда <font color="#0000CC">cvtpi2ps</font> преобразует два 32-разрядных
 целых числа со знаком в два FP- числа, записываемые в два  младших элемента 
выходного XMM-регистра. Два старших элемента выходного регистра не изменяются. <br>
Входной операнд может находиться в MMX-регистре или в памяти.
 Выходной операнд должен находиться в XMM-регистре.<br>

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>




<p><A NAME="cvtsi2ss"></a>
<b><font color="#0000CC">Преобразование 32-разрядного целого в SPFP-число</font></b><br>
Команда <font color="#0000CC">cvtsi2ss</font>
преобразует 32-разрядное целое число со знаком в FP-число, записываемое в младший элемент
 выходного XMM-регистра. Три старших элемента выходного регистра не изменяются. <br>
Входной операнд может находиться в целочисленном регистре или в памяти. 
Выходной операнд должен находиться в XMM-регистре.<br>


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>





<p><A NAME="sfence"></a>
<b><font color="#0000CC">Принудительная запись</font></b><br>
Команда <font color="#0000CC">sfence</font>  синхронизирует слабо упорядоченные обращения
 в память. Это достигается за счет принудительной записи в основную память.
 Если используется команда <font color="#0000CC">sfence</font>, то последующие команды записи
 выполнятся только после того, как из кэш-памяти в основную память 
 будут перенесены результаты всех предшествующих команд сохранения данных.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=199>





<p><A NAME="brcast"></a>
<b><font color="#0000CC">Размножение элемента регистра</font></b><br>

Чтобы выполнить размножение одного из 4 элементов регистра, 
используется команда <font color="#0000CC">shufps</font> (для XMM-регистров) 
или <font color="#0000CC">pshufw</font> (для MMX-регистров). 

"Размножаемый" элемент копируется во все четыре элемента выходного операнда. 
Используйте следующие значения третьего (непосредственного) операнда:

<br><font color="#0000CC">00</font>h <code><big>-</big></code> размножает младший элемент регистра
<br><font color="#0000CC">55</font>h <code><big>-</big></code> размножает второй элемент
<br><font color="#0000CC">AA</font>h <code><big>-</big></code> размножает третий элемент
<br><font color="#0000CC">FF</font>h <code><big>-</big></code> размножает старший элемент. 

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





<p><A NAME="eflags"></a>
<b><font color="#0000CC">Регистр EFLAGS</font></b><br>

В 32-разрядном регистре <font color="#0000CC">EFLAGS</font> содержатся 6 следующих флагов состояния:
<ul>
<li>  <font color="#0000CC">CF</font><code><big>-</big></code> флаг переноса (бит 0)
<li>  <font color="#0000CC">PF</font><code><big>-</big></code> флаг четности (бит 2)
<li>  <font color="#0000CC">AF</font><code><big>-</big></code> флаг дополнительного переноса (бит 4)
<li>  <font color="#0000CC">ZF</font><code><big>-</big></code> флаг нуля (бит 6)
<li>  <font color="#0000CC">SF</font><code><big>-</big></code> флаг знака (бит 7)
<li>  <font color="#0000CC">OF</font><code><big>-</big></code> флаг переполнения (бит 11)
</ul>
За более подробной информацией об этих флагах и регистре EFLAGS обращайтесь к
 &quot;Руководству программиста  по архитектуре Intel&quot;
 (&quot;Intel Architecture Software Developer’s Manual, Vol.1: Basic Architecture&quot;).

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="mxcsr"></a>
<b><font color="#0000CC">Регистр MXCSR</font></b><br>

В архитектуре новых команд процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font> регистр <font color="#0000CC">MXCSR</font> 
является 32-разрядным  регистром состояния и управления, который служит для:
<ul>
<li> Установки флагов обнаружения арифметических исключений;
<li> Установки флагов режимов обработки арифметических исключений ;
<li> Установки режима округления;
<li> Установки режима подавления исчезновения порядка (underflow). 
</ul>

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>


<p><A NAME="rounding"></a>
<b><font color="#0000CC">Режим округления</font></b><br>

Поле RC (биты 13 и 14) регистра <font color="#0000CC">MXCSR</font> 
управляет режимами округления результатов при выполнении SIMD-команд над данными с 
плавающей запятой. Возможны четыре различных режима округления:

<TABLE border=0 cellspacing=0 cellpadding=1 bgcolor="#FFFFCC" width=97%> 
<TR>
<TH align="center" width=50%><small>Режим</small></TH>
<TH align="center"><small>Значение поля&nbsp;RC </small></TH>
</TR>

<TR>
<TD><small>Округление до ближайшего</small></TD>
<TD align="center"><code><font color="#0000cc">00</font>B</code></TD>
</TR>
<TR>
<TD><small>Округление до меньшего или равного</small></TD>
<TD align="center"><code><font color="#0000cc">01</font>B</code></TD>
</TR>
<TR>
<TD><small>Округление до большего или равного</small></TD>
<TD align="center"><code><font color="#0000cc">10</font>B</code></TD>
</TR>
<TR>
<TD><small>Округление в сторону нуля</code></TD>
<TD align="center"><code><font color="#0000cc">11</font>B</small></TD>
</TR>
</TABLE>

По умолчанию устанавливается режим <i>округление до ближайшего</i>.
<br>За более подробной информацией об округлении обращайтесь 
к &quot;Руководству программиста  по архитектуре Intel&quot;
 (&quot;Intel Architecture Software Developer’s Manual, Vol.1: Basic Architecture&quot;).


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="mask-unmask"></a>
<b><font color="#0000CC">Режимы обработки арифметических исключений</font></b><br>
Арифметическое исключение обрабатывается по-разному, в зависимости от того, 
маскировано оно или нет.

Исключение считается маскированным, если соответствующий бит
 поля обработки исключений в регистре <font color="#0000CC">MXCSR</font> установлен 
в&nbsp;<font color="#0000CC">1</font>, и немаскированным - в противном случае. 
Маскированные исключения обрабатываются процессором, который формирует приемлемый результат
 (в соответствии с процедурой, установленной по умолчанию) и продолжает выполнение программы.<br>
Немаскированные исключения инициируют программный обработчик исключений. 
Необходимо проверить наличие поддержки немаскированных исключений со стороны операционной 
системы.


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





<p><A NAME="flush-to-zero"></a>
<b><font color="#0000CC">Режим flush-to-zero</font></b><br>

Если произошло исчезновение порядка (underflow), а поле flush-to-zero (<font color="#0000CC">FZ</font>, бит 15) регистра
<font color="#0000CC">MXCSR</font> установлено в 1,
то процессор выполняет следующие действия:
<ul>
<li> возвращает нулевое значение в качестве результата, присваивая ему знак истинного 
результата
<li> устанавливает в 1 биты 4 и 5 регистра 
<font color="#0000CC">MXCSR</font> (флаги обнаружения исключений 
исчезновения порядка и неточного результата).
</ul>
Указанные действия выполняются в том случае, если исключение underflow маскировано (бит 11 регистра <font color="#0000CC">MXCSR</font> установлен в 1).
При таком режиме увеличивается скорость работы программ, в которых часто происходит
исчезновение порядка результата. Достигается это, однако, ценой снижения точности вычислений.
Указанный режим работы не является согласованным с требованиями стандарта IEEE 754. 

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>






<p><A NAME="weakordered"></a>
<b><font color="#0000CC">Слабо упорядоченный доступ</font></b><br>

Обращения в память называются слабо упорядоченными, если фактическая последовательность 
операций записи в основную память не совпадает с той последовательностью, 
в которой эти операции происходят в программе. 
В этом случае копии данных, содержащиеся в основной памяти и в процессорных кэшах, 
не синхронизованы.<br>
Слабая упорядоченность доступа к памяти возникает в результате:
<ul>
<li> использования режима записи с буферизацией;
<li> внеочередного выполнения команд
</ul>

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>






<p><A NAME="fxsave"></a>
<b><font color="#0000CC">Сохранение состояния</font></b><br>
Команда <font color="#0000CC">fxsave</font> сохраняет в области памяти по 
указываемому адресу  состояние регистров данных с плавающей запятой, MMX-регистров, 
а также новых  регистров  процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font>.<br>
 Размер области памяти, в которой хранится информация о 
состоянии процессора, составляет 512 байт. 
 

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>






<p><A NAME="stmxcsr"></a>
<b><font color="#0000CC">Сохранение регистра MXCSR</font></b><br>
Команда <font color="#0000CC">stmxcsr</font>
записывает в 32-разрядное слово памяти содержимое регистра 
<font color="#0000CC">MXCSR</font>.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>
<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;




<p><A NAME="comiss"></a>
<b><font color="#0000CC">Сравнение скалярных SPFP-данных с установкой флагов EFLAGS</font></b><br>

Команда <font color="#0000CC">comiss</font> 
выполняет  сравнение двух младших элементов операндов и устанавливает 
для них одно из соотношений: «меньше», «равны», «больше», «несравнимы».
По результатам сравнения устанавливаются следующие значения флагов состояния 
<font color="#0000CC">ZF, PF</font> и <font color="#0000CC">CF</font>:
<pre><b>Результат  Значения в EFLAGS</b>
             <font color="#0000CC">ZF  PF  CF</font>
Несравнимы    1   1   1
Меньше        0   0   1
Больше        0   0   0
Равны         1   0   0
</pre>
Если хотя бы один из сравниваемых элементов операндов содержит значение QNaN или SNaN ,
флаги устанавливаются в "несравнимы" и генерируется  исключение.<p>
<A NAME="ucomiss"></a><p>
Команда <font color="#0000CC">ucomiss</font>
выполняет те же действия, что и команда <font color="#0000CC">comiss</font>. 
Разница заключается в обработке нечисловых операндов.
Для операндов типа SNaN команда <font color="#0000CC">ucomiss</font> генерирует
  исключение, а для операндов типа QNaN – нет. 
Флаги устанавливаются в значение "несравнимы" в каждом из случаев.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219> 




<p><A NAME="static"></a>
<b><font color="#0000CC">Статическая перегруппировка данных</font></b><br>

В этом случае имеется в виду такое перестроение алгоритма, 
чтобы на этапе размещения данных обеспечивалась их перегруппировка в памяти 
и хранение по модели SOA. <br>
Такой подход наиболее эффективен в программировании 
с применением SIMD-технологии, особенно при использовании операций с большой латентностью.
Однако не для всех задач его удается осуществить.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>



<p><A NAME="suffix"></a>
<b><font color="#0000CC">Суффиксы команд преобразования типов</font></b><br>

Суффиксы, используемые в мнемонических именах команд преобразования 
типов данных, расшифровываются так:

<br><b>pi</b> (<b>P</b>acked <b>I</b>nteger) <code>-</code> упакованные целые
<br><b>ps</b> (<b>P</b>acked <b>S</b>PFP) <code>-</code> упакованные SPFP-числа
<br><b>t</b>&nbsp;&nbsp;(<b>T</b>runcation) <code>-</code> округление с отбрасыванием дробной части
<br><b>si</b> (<b>S</b>calar <b>I</b>nteger) <code>-</code> скалярное целое
<br><b>ss</b> (<b>S</b>calar <b>S</b>PFP) <code>-</code> скалярное SPFP-число.
<br>
Суффикс, стоящий перед <b>2</b>, указывает исходный тип данных;
суффикс после <b>2</b> <code>-</code> тип результата.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





<p><A NAME="cachehints"></a>
<b><font color="#0000CC">Суффиксы команд кэширования</font></b><br>

Имена команд кэширования содержат суффиксы, специфицирующие различные варианты 
действий при кэшировании данных.<br> В архитектуре процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font>
эти команды действуют следующим образом:

<TABLE border=0 cellspacing=0 cellpadding=1 bgcolor="#FFFFCC" width=97%> 
<TR>
<TH align="center" width=20%><small>Суффикс</small></TH>
<TH align="center"><small>Действия</small></TH>
</TR>

<TR>
<TD align="center" valign="top"><code><font color="#0000cc">T0</font></code></TD>
<TD><code>Поместить нужные данные в кэш L1 и L2</code></TD>
</TR>
<TR>
<TD align="center" valign="top"><code><font color="#0000cc">T1</font></code></TD>
<TD><code>Поместить нужные данные  в кэш L2</code></TD>
</TR>
<TR>
<TD align="center" valign="top"><code><font color="#0000cc">T2</font></code></TD>
<TD><code>Поместить нужные данные  в кэш L2</code></TD>
</TR>
<TR>
<TD align="center" valign="top"><code><font color="#0000cc">NTA</font></code></TD>
<TD><code>Поместить слаболокализуемые данные в кэш-структуру для таких данных (L1)</code></TD>
</TR>
</TABLE>


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="mmx"></a>
<b><font color="#0000CC">Технология MMX&#153;</font></b><br>
Расширение набора команд процессоров Intel, позволяющее обрабатывать
несколько (до восьми) целочисленных элементов данных одновременно.
Впервые реализовано в процессоре Pentium&reg; с технологией MMX&#153; (1997 год).<br>
Для ознакомления с технологией MMX и методами оптимизации рекомендуются следующие источники:<br>
<p><small>

<li>Курс <I>Введение в технологию MMX (Introduction to MMX Technology)</i> </li>
<li>Справочник программиста по технологии MMX (<I>Intel Architecture MMX Technology Programmer's Reference Manual, код 243007)</i></li>
<li>Руководство разработчика по технологии MMX (<I>Intel Architecture MMX Technology Developer's Manual, код 243006)</i></li>
<li>Руководство по оптимизации для архитектуры Intel (<I>Intel Architecture Optimization Guide, код 243195)</i></li>

</small>


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="precision"></a>
<b><font color="#0000CC">Точность 11 бит</font></b><br>
"Точность 11 бит" означает, что максимальная величина относительной погрешности для приближения 
удовлетворяет неравенству:

<p>
|<i>a</i> <code>–</code> <i>b</i>| / |<i>b</i>| 
< 1.5<code>*</code>2<sup><code><big>–</big></code>12</sup>     

<p>
Здесь 
<i>a</i> <code><big>–</big></code> точный результат; 
<i>b</i> <code><big>–</big></code> приближенный результат. 

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>



<p><A NAME="datatype"></a>
<b><font color="#0000CC">Типы целочисленных данных</font></b><br>

Дополнительные целочисленные SIMD-команды работают с данными следующих типов: 
<ul>
<li>упакованные байты (суффикс команды <b>b</b>)
<li>упакованные слова (суффикс <b>w</b>)
<li>упакованные двойные слова (суффикс <b>d</b>) 
<li>64-разрядные слова (суффикс <b>q</b>)
</ul>
Тип конкретной 64-разрядной группы данных определяется той целочисленной командой,
 которая обрабатывает эту группу.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="pmulhuw"></a>
<b><font color="#0000CC">Умножение слов без знака</font></b><br>
Команда <font color="#0000CC">pmulhuw</font> 
попарно перемножает четыре <b>слова без знака</b> входного и выходного операндов,
что дает четыре 32-разрядных произведения. Старшие 16 разрядов произведений записываются
в 16-разрядные слова выходного операнда. Младшие 16 разрядов промежуточных произведений 
теряются.<br>

Входной операнд может располагаться либо в MMX-регистре, либо в памяти. 
Выходной операнд должен находиться в MMX-регистре.


<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="prefetch"></a>
<b><font color="#0000CC">Упреждаюее кэширование</font></b><br>
Команды <font color="#0000CC">prefetch0, prefetch1</font> и <font color="#0000CC">prefetch2</font>
служат для загрузки кэш-линии данных с временн&oacute;й локализацией
в кэш-память различных уровней.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="rotate"></a>
<b><font color="#0000CC">Циклический сдвиг</font></b><br>


Чтобы выполнить циклический сдвиг четырех элементов регистра, 
используется команда <font color="#0000CC">shufps</font> (для XMM-регистров) 
или <font color="#0000CC">pshufw</font> (для MMX-регистров). 
Значения третьего (непосредственного) операнда могут быть следующими:

<br><font color="#0000CC">93h</font> <code><big>-</big></code> сдвигает элементы данных 
влево на один элемент. Старший элемент перемещается в младший элемент выходного регистра.
<br><font color="#0000CC">39h</font> <code><big>-</big></code> сдвигает элементы данных 
вправо на один элемент. Младший элемент перемещается в старший элемент выходного регистра.
<br><font color="#0000CC">4Eh</font> <code><big>-</big></code> циклически сдвигает элементы данных 
на два элемента.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>



<p><A NAME="signed"></a>
<b><font color="#0000CC">Целые числа со знаком</font></b><br>

Целые числа со знаком могут содержаться в двоичном виде в элементах данных типа байт, слово или двойное слово. 
Во всех операциях считается, что отрицательные числа представлены в дополнительном коде.  
<br>
Для различных типов данных допустимый диапазон целых чисел со знаком следующий:
<table cellpadding=2 cellspacing=2 border=0 width=97%>
<tr><td>Байт со знаком: </td><td><code><nobr>-128...+127</nobr></code></td></tr>
<tr><td>Слово со знаком: </td><td><code><nobr>-32768...+32767</nobr></code></td></tr>
<tr><td>Двойное слово со знаком: </td><td><code><nobr>–2<sup>31</sup>...+2<sup>31</sup>-1</nobr></code></td></tr>
</table>
Старший бит в каждом из перечисленных типов данных является битом знака. 
Значение знакового бита для отрицательных чисел равно 
<font color="#0000CC">1</font>, а для положительных 
чисел и нуля – равно <font color="#0000CC">0</font>.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





<p><A NAME="unsigned"></a>
<b><font color="#0000CC">Целые числа без знака</font></b><br>

Целые числа без знака могут содержаться в двоичном виде в элементах данных типа байт, слово или двойное слово. 
<br>Для различных типов данных допустимый диапазон целых чисел без знака следующий:

<table cellpadding=2 cellspacing=2 border=0 width=97%>
<tr><td>Байт без знака: </td><td><code><nobr>0...255</nobr></code></td></tr>
<tr><td>Слово без знака: </td><td><code><nobr>0...65535</nobr></code></td></tr>
<tr><td>Двойное слово без знака: </td><td><code><nobr>0...2<sup>32</sup>-1</nobr></code></td></tr>
</table>

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





<p><A NAME="integer"></a>
<b><font color="#0000CC">Целочисленные элементы данных</font></b><br>

Целочисленными элементами данных являются байты (8 бит), 16-разрядные слова, 
32-разрядные двойные слова и длинные 64-разрядные слова.<br>
В технологии MMX&#153; <b>упакованные</b> данные определяются как 64-разрядные группы из 8 байтов, 
4 слов или 2 двойных слов. 64-разрядное слово как новый тип целочисленных данных
также появилось в технологии MMX.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>






<p>
<map NAME="letters">
<area SHAPE="RECT" COORDS="0,0 15,19"   HREF="#_a">
<area SHAPE="RECT" COORDS="16,0 31,19"  HREF="#_b">
<area SHAPE="RECT" COORDS="32,0 47,19"  HREF="#_c">
<area SHAPE="RECT" COORDS="48,0 63,19"  HREF="#_d">
<area SHAPE="RECT" COORDS="64,0 79,19"  HREF="#_e">
<area SHAPE="RECT" COORDS="80,0 95,19"  HREF="#_f">
<area SHAPE="RECT" COORDS="96,0 111,19" HREF="#_g">
<area SHAPE="RECT" COORDS="112,0 127,19" HREF="#_h">
<area SHAPE="RECT" COORDS="128,0 143,19" HREF="#_i">
<area SHAPE="RECT" COORDS="144,0 159,19" HREF="#_j">
<area SHAPE="RECT" COORDS="160,0 175,19" HREF="#_k">
<area SHAPE="RECT" COORDS="176,0 191,19" HREF="#_l">
<area SHAPE="RECT" COORDS="192,0 209,19" HREF="#_m">
<area SHAPE="RECT" COORDS="0,20 15,39"   HREF="#_n">
<area SHAPE="RECT" COORDS="16,20 31,39"  HREF="#_o">
<area SHAPE="RECT" COORDS="32,20 47,39"  HREF="#_p">
<area SHAPE="RECT" COORDS="48,20 63,39"  HREF="#_q">
<area SHAPE="RECT" COORDS="64,20 79,39"  HREF="#_r">
<area SHAPE="RECT" COORDS="80,20 95,39"  HREF="#_s">
<area SHAPE="RECT" COORDS="96,20 111,39" HREF="#_t">
<area SHAPE="RECT" COORDS="112,20 127,39" HREF="#_u">
<area SHAPE="RECT" COORDS="128,20 143,39" HREF="#_v">
<area SHAPE="RECT" COORDS="144,20 159,39" HREF="#_w">
<area SHAPE="RECT" COORDS="160,20 175,39" HREF="#_x">
<area SHAPE="RECT" COORDS="176,20 191,39" HREF="#_y">
<area SHAPE="RECT" COORDS="192,20 209,39" HREF="#_z">
</map>


<p>&nbsp;<p>
<a NAME="english"></a>
<nobr><img SRC="button/tabs.gif" usemap="#tabs" border=0 width=210 height=19
><br><img SRC="button/letters.gif" usemap="#letters" alt="Latin alphabet" border=0 width=210 height=40
></nobr>

<p>
<B>Словарь английских терминов</B>
<br>
<small>
Чтобы вернуться, нажмите кнопку
<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>
</small>


<small>

<a NAME="_a"></a>
<p>
<b>А</b>
<br><a href="#alpha">alpha</a>
<br><a href="#alphasat">alpha-saturation</a>
<br><a href="javascript:top.showtopic(47)">AOS</a> (array of structures)
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="_b"></a>
<a NAME="_c"></a>
<p>
<b>C</b>
<br><a href="#cpuid">CPUID</a> 
<br><a href="#cr0">CR0.EM</a> (bit)
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>

<a NAME="_d"></a>
<a NAME="_e"></a>
<p>
<b>E</b>
<br><a href="#exception">exceptions</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="_f"></a>
<p>
<b>F</b>
<br><a href="#flush-to-zero">flush-to-zero</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="_g"></a>
<a NAME="_h"></a>
<a NAME="_i"></a>
<a NAME="_j"></a>
<a NAME="_k"></a>
<a NAME="_l"></a>
<a NAME="_m"></a>
<p>
<b>M</b>
<br><a href="#mxcsr">MXCSR</a> (register)
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>




<a NAME="_n"></a>

<p>
<b>N</b>
<br><a href="#new-raph">Newton-Raphson algorithm</a>
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>



<a NAME="_o"></a>
<a NAME="_p"></a>
<a NAME="_q"></a>
<p>
<b>Q</b>
<br><a href="#qnan">QNaN</a> (quiet NaN)
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>



<a NAME="_r"></a>
<p>
<b>R</b>
<br><a href="#rgb">RGB</a> (color model)
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>


<a NAME="_s"></a>
<p>
<b>S</b>
<br><a href="#simd">SIMD</a> 
<br><a href="#snan">SNaN</a> (signalling NaN)
<br><a href="javascript:top.showtopic(47)">SOA</a> (structure of arrays)
<br><a href="#spfpcom">SPFP</a> (single precision floating point)
<br><a href="#sse">Streaming SIMD Extensions</a> (SSE)
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>

<a NAME="_t"></a><p>
<a NAME="_u"></a><p>
<a NAME="_v"></a><p>
<a NAME="_w"></a><p>
<a NAME="_y"></a><p>
<a NAME="_z"></a><p>

<a NAME="_x"></a>
<p>
<b>X</b>
<br><a href="#x87">x87</a> 
<br><a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a>

</small>


<p>&nbsp;<br>

<p><A NAME="cr0"></a>
<b><font color="#0000CC">CR0.EM</font></b><br>
Прежде чем использовать SIMD-команды для SPFP-данных, дополнительные целочисленные 
SIMD-команды, а также команды управления кэшированием, программа должна проверить, 
что бит 2 управляющего регистра (<font color="#0000CC">CR0.EM</font>) установлен в
 <font color="#0000CC">0</font> (эмуляция отключена).<br>
Если это условие нарушено, то новые команды (за исключением команд упреждающей
 выборки <font color="#0000CC">prefetch</font> и принудительной записи
<font color="#0000CC">sfence</font>) будут генерировать исключение
 недопустимого кода операции (<font color="#0000CC">Int 6</font>). 

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>



<p><A NAME="cr4"></a>
<b><font color="#0000CC">CR4.OSFX</font></b><br>
Для подтверждения поддержки со стороны операционной системы новых регистров 
 процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font> при переключении контекста, 
программа должна проверить, 
что бит 9 управляющего регистра (<font color="#0000CC">CR4.OSFX</font>)  установлен в 
<font color="#0000CC">1</font>.<br>
Если это условие нарушено, то новые SIMD-команды для SPFP-данных будут
 генерировать исключение недопустимого кода операции (<font color="#0000CC">Int 6</font>). 
<br>Дополнительные целочисленные SIMD-команды, а также команды управления 
кэшированием, не генерируют исключение при установке 
<font color="#0000CC">CR4.OSFX</font> в 0.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>



<p><A NAME="cpuid"></a>
<b><font color="#0000CC">CPUID.XMM</font></b><br>

Для подтверждения процессорной поддержки  <b>всех</b> новых 
команд процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font>, 
программа должна выполнить команду <font color="#0000CC"><code>CPUID</code></font> с 
<font color="#0000CC"><code>eax=1</code></font>  и проверить, что в результате бит <font color="#0000CC"><code>CPUID.XMM</code></font>
(бит 25 регистра <font color="#0000CC"><code>EDX</code></font>) установлен в <font color="#0000CC"><code>1</code></font>.
<br>Если это не так, то новые команды  будут генерировать исключение 
недопустимого кода операции (<font color="#0000CC">Int 6</font>).

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="qnan"></a>
<b><font color="#0000CC">QNaN (Quiet NaN - "тихий NaN")</font></b><br>

Согласно стандарту IEEE, величина QNaN определяется как любое нечисловое значение (NaN),<br>
 у которого старший бит мантиссы равен <font color="#0000CC">1</font>. 

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>






<p><A NAME="rgb"></a>
<b><font color="#0000CC">RGB-представление цветов</font></b><br>
RGB-представление используется для определения цвета по интенсивности 
его красной, зеленой и синей компонент. 
Название RGB является сокращением английских слов 
Red, Green, Blue&nbsp;<big><code>–</code></big> красный, зеленый, синий. 

<p>
Значения RGB-компонент обычно изменяются в диапазоне от 0 до 255 и представляются 
как целые числа без знака.
Вот некоторые примеры RGB-представления цветов:<pre>
черный    (0,0,0)
белый     (255,255,255)
синий     (0,0,255)
зеленый   (0,255,0)
красный   (255,0,0)
пурпупный (255,0,255)
желтый    (255,255,0)
голубой   (0,255,255)
</pre>

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





<p><A NAME="simd"></a>
<b><font color="#0000CC">SIMD</font></b><br>
Архитектура SIMD (<b>S</b>ingle <b>I</b>nstruction, <b>M</b>ultiple <b>D</b>ata 
<code><big>-</big></code> одна команда, несколько элементов
данных) позволяет одной команде процессора обрабатывать параллельно несколько однотипных 
упакованных элементов данных.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>




<p><A NAME="snan"></a>
<b><font color="#0000CC">SNaN (Signalling NaN - "сигнализирующий NaN")</font></b><br>

Величина SNaN определяется как любое нечисловое значение (NaN),<br> у которого старший бит
мантиссы равен <font color="#0000CC">0</font>,
а хотя бы один из оставшихся битов мантиссы содержит <font color="#0000CC">1</font>. 
<br>Если все биты мантиссы равны <font color="#0000CC">0</font>, то величина считается равной бесконечности.
<br>SNaN обычно используется для активизации обработчика исключений.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





<p><A NAME="spfpcom"></a>
<b><font color="#0000CC">SPFP (single precision floating point)</font></b><br>
SPFP-команды <code><big>-</big></code> это новые команды процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font>, которые работают с упакованными 
32-разрядными элементами данных, содержащими числа с плавающей запятой одинарной точности.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>



<p><A NAME="sse"></a>
<b><font color="#0000CC">Streaming SIMD Extensions (SSE)</font></b><br>
Streaming SIMD Extensions <code><big>-</big></code> это 
обобщающее название всех новых команд процессора Pentium&reg;&nbsp;<font face="sans-serif">III</font>.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=259>





<p><A NAME="x87"></a>
<b><font color="#0000CC">Архитектура x87</font></b><br>
Процессор Intel386&#153; и его предшественники не поддерживали представления чисел
с плавающей запятой и не имели регистров для хранения таких чисел.
Для вычислений с плавающей запятой требовался математический сопроцессор. 
Например, процессор Intel 8086 имел математический сопроцессор <b>8087</b>,
а процессор Intel 80286 <code><big>-</big></code> сопроцессор <b>80287</b>.
Сопроцессоры поддерживали набор команд и регистров для работы с
80-разрядными числами с плавающей запятой. Эти команды, регистры и формат чисел
получили обобщающее название <b>архитектура x87</b>.
Позднее, начиная с процессора Intel486&#153;, эти команды и регистры 
были реализованы в самом центральном процессоре, 
и математический сопроцессор стал не нужен.
Тем не менее название "архитектура x87" сохранилось.

<a href="javascript:goBack()"><img src="button/glosback.gif" alt="Назад" height=15 width=15 border=0></a><p>
<img src="space.gif" width=1 height=219>





</BODY>
</HTML>

